/* Zeit Logelei 2009/31 Michaela hat ihren Garten in ein Labyrinth verwandelt
https://www.zeit.de/2009/31/Spiele-Logelei-31 */
import sat, util.
main =>
    % Man muss jedes Feld mindestens einmal betreten -> Schrittzahl N ist mindestens 20:
    N = 23, % probiere der Reihe nach 20, 21, 22, 23! 
    Bl=1, Ge=2, Li=3, Gr=4, Or=5, Ro=6, Farbe = ["Blau", "Gelb", "Lila", "Grün", "Orange", "Rosa"],
    /* Farbregeln: Bei einer Farbe darf man nur geradeaus (G) gehen, dann gibt es eine, wo man nur nach rechts (R) gehen darf. 
    Bei einer Farbe muss man immer zurück (Z), bei einer anderen links (L) abbiegen. 
    Bei der fünften darf man entweder geradeaus- oder zurückgehen (GvZ), 
    und bei der letzten muss man abbiegen, aber kann noch wählen, ob nach links oder nach rechts (LvR): */
    FR = new_list(6), FR :: 0..5, all_different(FR), FRstr = ["G", "R", "Z", "L", "GvZ", "LvR"],
    FC = {{Ro,Or,Ge,Li}, % Farbcode
          {Or,Ge,Li,Gr},
          {Gr,Bl,Or,Gr},
          {Li,Or,Ro,Or}}, 
    % Beschreibe den Weg durch das Labyrinth:
    Zs = new_array(N), Ss = new_array(N), Zs :: 1..4, Ss :: 1..4,
    Zs[1] = 1, Ss[1] = 3, Zs[N] #= 2, Ss[N] #= 4, % Koordinaten Startpunkt/ Endpunkt
    % Manche Verbindungen zwischen den Feldern sind geblockt: {Z,S,DZ,DS}:
    Blocked = [{1,3,1,0}, {2,2,1,0}, {2,3,-1,0}, {3,1,0,1}, {3,2,0,-1}, {3,2,-1,0}, {3,3,1,0}, {4,3,-1,0}],
    Wg = new_array(N), Wg :: 0..3, % 0=Geradeaus, 1=Rechts, 2=Zurück, 3=Links 
    % Himmelsrichtung, in der das I-te Feld betreten wird:
    Ri = new_array(N), Ri :: 0..3, % 0=N, 1=O, 2=S, 3=W
    Ri[1] #= 2, % man betritt das Labyrinth in Richtung Süd 
    foreach(I in 1..N-1)
        Z0 #= Zs[I], S0 #= Ss[I], 
        matrix_element(FC, Z0, S0, FCode), % Z0|S0 -> Farbcode 1..6 = Blau..Rosa (beim 1. Feld Gelb) 
        element(FCode, FR, FRegel),        % Farbcode -> Farbregel 0..5
        Wg[I] #= (Ri[I+1] - Ri[I]) mod 4,  % z.B. O - S = (1 - 2) mod 4 = 3 = L = Wg[1] 
        erlaubt(Wg[I], FRegel),            % Erlaubt die Farbregel für Gelb, links abzubiegen?
        [DZ,DS] :: -1..1, abs(DZ) + abs(DS) #= 1, % ein Schritt in orthogonaler Richtung
        table_notin({Z0,S0,DZ,DS}, Blocked), % der geplante Schritt ist nicht blockiert
        % Richtung, in der das nächste Feld betreten wird:
        Ri[I+1] #= 0 #<=> (DZ #= -1 #/\ DS #= 0),  % 0=Nord
        Ri[I+1] #= 1 #<=> (DZ #= 0  #/\ DS #= 1),  % 1=Ost 
        Ri[I+1] #= 2 #<=> (DZ #= 1  #/\ DS #= 0),  % 2=Süd
        Ri[I+1] #= 3 #<=> (DZ #= 0  #/\ DS #= -1), % 3=West
        Zs[I+1] #= Z0 + DZ, Ss[I+1] #= S0 + DS     % Koordinaten des nächsten Felds
    end, 
    Wg[N] #= (1 - Ri[N]) mod 4, % verlasse das Labyrinth in Richtung Ost = 1
    erlaubt(Wg[N], FR[Gr]),     % dies ist laut Farbregel für Grün erlaubt!
    solve(FR ++ Zs ++ Ss ++ Wg ++ Ri),
    foreach(I in 1..6) printf("%s = %s, ", Farbe[I], FRstr[1+FR[I]]) end, nl,
    RiChr = "NOSW", WgChr = "GRZL",
    foreach(I in 1..N) printf("%c ", WgChr[1+Wg[I]]) end, nl,
    foreach(I in 1..N) printf("%c ", RiChr[1+Ri[I]]) end, nl,
    foreach(I in 1..N) printf("%d ", Zs[I]) end, nl,
    foreach(I in 1..N) printf("%d ", Ss[I]) end, nl.
/* Blau = Z, Gelb = L, Lila = R, Grün = G, Orange = LvR, Rosa = GvZ
L R G G R G R Z R R G R L L Z R L R R Z L R G Weg
S O S S S W W N S W N N O N W O S O S W O N O Richtung, in der das Feld betreten wurde
1 1 2 3 4 4 4 3 4 4 3 2 2 1 1 1 2 2 3 3 3 2 2 Zeile
3 4 4 4 4 3 2 2 2 1 1 1 2 2 1 2 2 3 3 2 3 3 4 Spalte
CPU time 0.487 seconds, korrekt */    
erlaubt(Weg, FRegel) => % Farbregel: 0=G, 1=R, 2=Z, 3=G, 4=GvZ, 5=LvR
    FRegel #= Weg #\/ (FRegel - 4 #= Weg mod 2).