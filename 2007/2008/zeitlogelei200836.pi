/* Zeit Logelei 2008/36 Crossfigure Puzzle Kreuzzahlrätsel
https://www.zeit.de/2008/36/Spiele-Logelei-36 
Passe ggfs. Zeilen 6-12, 16, 32 an! Achtung: Z, S, X werden schon verwendet! */
import sat, util.
main =>
   A=1, B=2, C=3, D=4, E=5, F=6, G=7, H=8, I=9, J=10, K=11, L=12, M=13, N=14, O=15, P=16, Max=16,
   LM = {{A,B,C,D,E,F,G,H},
		 {I,0,0,0,0,0,0,0},
		 {J,0,K,0,L,0,M,N},
		 {O,0,0,0,0,P,0,0}},     
   WLetter := [A,I,J,O,P], % alle Buchstaben mit waagrechter Bedingung
   SLetter := [A,B,C,D,E,F,G,H,J,K,L,M,N], % alle Buchstaben mit senkrechter Bedingung
   NZ = len(LM), NS = len(LM[1]), 
   FWD = 1, REV = 2, QSUM = 3, QPROD = 4,
   X = new_array(NZ,NS), XVars = array_matrix_to_list(X), XVars :: 0..9,
   Wr = new_array(Max,4), Wr :: 1..99999999, Squares = [Y**2: Y in 1..9999], % Waagrechte Zahlen
   Sr = new_array(Max,4), Sr :: 1..9999, Primes = primes(99), % Senkrechte Zahlen
   % Waagerecht:
   Wr[A,FWD] #= Wr[I,FWD] + Wr[J,FWD], % A I waagerecht plus J waagerecht 
   Wr[I,FWD] :: Squares, % I Quadratzahl 
   Wr[J,FWD] #= Sr[F,FWD] ** 2, % J Quadrat von F senkrecht 
   Wr[O,FWD] #= (Sr[L,FWD] + Sr[C,FWD]) ** 2, % O Quadrat der Summe von L senkrecht und C senkrecht 
   Wr[P,QPROD] #= Sr[L,FWD], % P Querprodukt ist L senkrecht   
   % Senkrecht:
   multiple(Sr[C,FWD],Sr[A,REV]), % A C senkrecht ist Vielfaches des Rückwerts 
   Sr[B,FWD] #= (Sr[K,FWD] + Sr[J,FWD]) ** 2, % B Quadrat der Summe von K senkrecht und J senkrecht 
   Sr[C,QPROD] :: Squares, % C Querprodukt ist Quadratzahl 
   multiple(Sr[D,FWD],Wr[P,FWD]), % D Vielfaches von P waagerecht 
   Sr[E,REV] #= Wr[I,QSUM], % E Rückwert ist Quersumme von I waagerecht 
   Sr[F,FWD] :: Squares, % F Quadratzahl 
   
   Sr[G,REV] #= Wr[P,QSUM], % G Rückwert ist Quersumme von P waagerecht 
   Sr[H,REV] :: Primes, % H Rückwert ist Primzahl 
   Sr[J,FWD] #= Sr[M,REV] - Sr[N,FWD], % J Rückwert von M senkrecht minus N senkrecht 
   multiple(Sr[H,FWD],Sr[K,FWD]), % K H senkrecht ist ein Vielfaches 
   Sr[L,FWD] :: Squares, % L Quadratzahl 
   Sr[M,FWD] :: Primes, % M Primzahl 
   Sr[N,FWD] :: Primes, % N Primzahl
   foreach(Letter in WLetter) % Berechne alle Waagrechten Zahlen aus der Matrix X
        Row := 0, Col := 0, Len := 0,
		foreach(Z in 1..NZ)
			foreach(S in 1..NS, LM[Z,S] = Letter) Row := Z, Col := S end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..NS, Len == 0, membchk(LM[Z,Cn],WLetter)) Len := Cn - Col end,
				if Len = 0 then Len := NS+1-Col end 
		    end 
		end,
	    Temp = new_list(Len), Temp :: 0..9,
   		foreach(Idx in 0..Len-1) X[Row,Col+Idx] #= Temp[Idx+1] end,
		X[Row,Col] #!= 0,
        to_num(Temp,Wr[Letter,FWD]), to_num_rev(Temp,Wr[Letter,REV]),
        Wr[Letter,QSUM] #= sum(Temp), Wr[Letter,QPROD] #= prod(Temp)
   end,
   foreach(Letter in SLetter) % berechne alle senkrechte Zahlen aus der Matrix X 
      Row := 0, Col := 0, Len := 0,
		foreach(S in 1..NS)
			foreach(Z in 1..NZ, LM[Z,S] = Letter) Row := Z, Col := S end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..NZ, Len == 0, membchk(LM[Rn,S],SLetter)) Len := Rn - Row end,
				if Len = 0 then Len := NZ+1-Row end
			end 
		end,
   		Temp = new_list(Len), Temp :: 0..9,
   		foreach(Idx in 0..Len-1) X[Row+Idx,Col] #= Temp[Idx+1] end,
		X[Row,Col] #!= 0,
        to_num(Temp,Sr[Letter,FWD]), to_num_rev(Temp,Sr[Letter,REV]),
        Sr[Letter,QSUM] #= sum(Temp), Sr[Letter,QPROD] #= prod(Temp)
   end,
   solve(XVars ++ vars(Wr) ++ vars(Sr)),
   foreach(Z in 1..NZ) 
      foreach(S in 1..NS) printf("%d ", X[Z,S]) end, nl
   end.
/* 
4 3 2 5 1 5 5 7 
1 4 8 5 3 3 1 6 
2 8 3 9 8 2 4 1 
1 1 8 8 1 9 3 3 
CPU time 154.737 seconds, korrekt */
multiple(X,A) => % X ist Vielfaches von A
   X mod A #= 0.
   
palindrom(L) =>
    N = len(L),
    foreach(I in 1..N//2) L[I] #= L[N + 1 - I] end.

to_num(List, Num) => % Num = Wert der Liste
        Len = length(List),
        Num #= sum([List[I]*10**(Len-I) : I in 1..Len]).

to_num_rev(List, Num) => % Num = Rückwert der Liste
        Len = length(List),
        Num #= sum([List[I]*10**(I-1) : I in 1..Len]).