/* Zeit Logelei 2022/36 Zahlenpyramide */
import cp.
main ?=>
    M = {{8},
         {_,_},
         {8,_,_},
         {_,_,_, 7},
         {8,_,_, _,_},
         {_,_,_, 7,_,_},
         {_,_,_, _,_,7, _},
         {_,_,_, _,_,_, _,8},
         {8,_,_, _,_,_, _,_,_}}, N = len(M), 
    M :: 1..9, % es dürfen nur Zahlen von 1 bis 9 eingetragen werden
    foreach(Row in M) all_different(Row) end, % in jeder Zeile darf jede Zahl nur maximal einmal vorkommen
    % Jede Zahl, die sich über zwei anderen Zahlen befindet, ..
    foreach(Z in 1..N-1, S in 1..Z) % .. ist die Summe oder die Differenz der beiden Zahlen darunter:
        M[Z,S] #= M[Z+1,S] + M[Z+1,S+1] #\/ M[Z,S] #= abs(M[Z+1,S] - M[Z+1,S+1]) 
    end,
    solve(M),
    foreach(Z in 1..N, S in Z-N+1..Z)  % je Zeile N-1..0 = führende Blanks, dann 1..N Zahlen
        if S < 1 then print(" ") else printf("%d ", M[Z,S]) end, 
        if S = Z then nl end
    end, fail. /*
        8 
       1 9 
      8 7 2 
     6 2 5 7 
    8 2 4 1 6 
   9 1 3 7 8 2 
  3 6 5 8 1 7 9 
 7 4 2 3 5 6 1 8 
8 1 5 7 4 9 3 2 6 
CPU time 0.005 seconds, no more solutions, korrekt */