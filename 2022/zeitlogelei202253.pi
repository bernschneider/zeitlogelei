/* Zeit Logelei 2022/53
   Hinweis: Andere Kreuzzahlrätsel werden gelöst, indem man die Zeilen 11-18 und 24-53 anpasst 
   Die Startkoordinaten und Längen der Zahlen müssen nicht angegeben werden. Sie werden in waagrecht(..) bzw. senkrecht(...) aus den Buchstaben berechnet 
   Für die Längenberechnung wird mit membchk nach dem nächsten Buchstaben in der Zeile bzw. Spalte gesucht, für den eine Cons-Regel existiert */
import cp.
import util.
main => 
   LM = {{a,b,c,d,e,f},
		 {g,x,x,x,x,x},
	     {h,x,x,x,i,x},
	     {j,x,k,l,m,x},
	     {n,x,x,o,x,p},
	     {q,x,r,x,s,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,c,g,h,i,j,m,n,o,q,r,s], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,f,h,k,l,p], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = 6, ZAHL = 10, QSUM = 1, FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N),
   MVars = array_matrix_to_list(M),
   MVars :: 0..9,
   % Waagrecht:
   waagrecht(M,n,ZAHL,FWD,Nw), square(Nw), % % Alle dreistelligen Zahlen sind Quadratzahlen
   waagrecht(M,o,ZAHL,FWD,Ow), square(Ow), % dito
   waagrecht(M,a,ZAHL,FWD,Aw), multiple(Rw,Aw), % A Vielfaches von R waagerecht
   waagrecht(M,a,ZAHL,REV,RAw), % siehe bei I waagrecht
   waagrecht(M,c,ZAHL,FWD,Cw), waagrecht(M,c,ZAHL,REV,RCw), Cw #= RCw, 
   waagrecht(M,g,ZAHL,FWD,Gw), Gw #= Bs + Es, % G B senkrecht plus E senkrecht
   waagrecht(M,h,ZAHL,FWD,Hw), waagrecht(M,h,ZAHL,REV,RHw), Hw #= RHw, % H Palindrom
   waagrecht(M,i,ZAHL,FWD,Iw), Iw #= Mw + RAw, % I M waagerecht plus Rückwert von A waagerecht
   waagrecht(M,j,ZAHL,REV,RJw), % siehe bei H senkrecht
   waagrecht(M,j,ZAHL,FWD,Jw), Jw #= Hw + Hs, % J H waagerecht plus H senkrecht
   waagrecht(M,m,ZAHL,FWD,Mw), is_prime(Mw), % M Primzahl
   waagrecht(M,m,QSUM,FWD,QMw), % siehe bei R wwagrecht
   waagrecht(M,q,ZAHL,FWD,Qw), is_prime(Qw), % Q Primzahl
   waagrecht(M,r,ZAHL,FWD,Rw), % siehe bei A waagrecht
   waagrecht(M,r,ZAHL,REV,RRw), RRw #= QMw, % R Der Rückwert ist die Quersumme von M waagerecht
   waagrecht(M,s,ZAHL,FWD,Sw), Sw #= Ls - As, % S L senkrecht minus A senkrecht  
   % Senkrecht:
   senkrecht(M,k,ZAHL,FWD,Ks), square(Ks), % Alle dreistelligen Zahlen sind Quadratzahlen
   senkrecht(M,l,ZAHL,FWD,Ls), square(Ls), % dito
   senkrecht(M,a,ZAHL,FWD,As), multiple(RAw,As), % A Vielfaches des Rückwerts von A waagerecht
   senkrecht(M,b,ZAHL,FWD,Bs), multiple(Iw, Bs), % B Vielfaches von I waagerecht
   senkrecht(M,e,ZAHL,FWD,Es), % siehe bei G waagrecht
   senkrecht(M,e,QSUM,FWD,QEs), is_prime(QEs), % E Die Quersumme ist eine Primzahl
   senkrecht(M,f,ZAHL,FWD,Fs), Fs #= Sw * Ps, % F S waagerecht mal P senkrecht
   senkrecht(M,h,ZAHL,FWD,Hs), % siehe J waagrecht
   senkrecht(M,h,ZAHL,REV,RHs), multiple(RJw, RHs), % H Der Rückwert ist Vielfaches des Rückwerts von J waagerecht
   senkrecht(M,l,ZAHL,FWD,Ls), % siehe bei S waagrecht
   senkrecht(M,p,ZAHL,FWD,Ps), is_prime(Ps),
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl. /*
8 2 2 1 1 2 
4 2 8 4 9 4 
4 9 9 4 8 7 
9 9 1 1 5 9 
1 4 4 2 5 6 
7 1 4 1 3 7 
CPU time 0.033 seconds, korrekt */

multiple(A,X) => % X ist Vielfaches von A
   X mod A #= 0.
   
is_prime(X) =>
   Max = fd_max(X),
   foreach(I in 2..Max // 2)
      I #!= X #=> X mod I #> 0
   end.

square(X) => 	      % so klappt´s!
   SQ = [I*I : I in 1..1000],
   element(_,SQ,X).
   /*Max = fd_max(X), % so funktioniert es leider nicht immer!
   Tmp :: 0..Max,
   X #= Tmp*Tmp.*/

waagrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N)
					if Len == 0, membchk(LM[R,Cn],WLetter) then Len := Cn - Col end
				end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
     		 M[Row,Col+I] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	

senkrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N)
					if Len == 0, membchk(LM[Rn,C],SLetter) then Len := Rn - Row end
				end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
      		M[Row+I,Col] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	
   
to_num(List, Base, Fwd, Num) => % Num = Wert der Liste
        Len = length(List), 
        Num #= cond(Fwd, sum([List[I]*Base**(Len-I) : I in 1..Len]), sum([List[I]*Base**(I-1) : I in 1..Len])).