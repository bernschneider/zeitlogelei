/* Zeit Logelei 2022/08 Summen von Blöcken
https://www.zeit.de/zeit-magazin/2022/32/logelei */
import sat, util.
main =>
  Max = 5, % Ziffern von 1..5
  SigZ = [ [2,13], [5,3,6], [8,7], [4,4,1], [5,5], [9,0] ], % Zeilensignatur
  SigS = [ [11], [4,5], [7,7], [2,7,3], [4,4,5], [10,2] ],  % Spaltensignatur
  NZ = len(SigZ), NS = len(SigS),
  Board = new_array(NZ+1,NS+1), % End-0er angefügt für die Blockbildung
  % Board[1,6] #= 0, Board[4,6] #> 0, % magic
  foreach(Z in 1..NZ) Board[Z,NS+1] #= 0 end, 
  foreach(S in 1..NS) Board[NZ+1,S] #= 0 end,  
  Boardvars = array_matrix_to_list(Board), Boardvars :: 0..Max,  
  foreach(Row in rows(Board)) all_different_except_0(Row) end,
  foreach(Col in columns(Board)) all_different_except_0(Col) end,
  foreach(Z in 1..NZ) signature(NS, Max, [Board[Z,S] : S in 1..NS+1], SigZ[Z]) end,
  foreach(S in 1..NS) signature(NZ, Max, [Board[Z,S] : Z in 1..NZ+1], SigS[S]) end,
  solve(Boardvars), print_board(NZ, NS, Board). /* 
 1   4 3 5  
 4   2     5
 2 5   1 3 4
 3     5   2
   1 3   4  
   3 5 2   1
CPU time 0.194 seconds, korrekt */
signature(N, Max, L, Sig) =>     % berechnet L aus Sig! Kein solve(Idx) nötig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig), Idx = new_list(Len+1), Idx :: 0..N+1,       % Indices der End-0er
	foreach(J in 1..Len)
   	    I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1, I1 #> 1,
   	    element(I1,L,0),     	% I1 zeigt auf eine 0
   	    sum([ L[I] * (I0 #< I) * (I #< I1) : I in 1..N]) #= S,  % berechne die Teilsumme S
        % Wegen eines Fehlers bei der Datenübertragung sind alle Angaben entweder eins zu groß oder eins zu klein:
   	    if Sig[J] = 1 then S #= 2               % there can´t be a 0 sum block!
                      else abs(S - Sig[J]) #= 1 % entweder eins zu groß oder eins zu klein:
        end
    end, 
    % Vor dem ersten Index stehen nur 0er:
    foreach(I in 1..N) (Idx[1] #< I) #\/ (L[I] #= 0) end,
    % 0er hinter Nicht-0ern müssen ein Index sein (dürfen nicht sonstwo stehen): > 1 5 >0 0 0 3 4 >0
    foreach(I in 2..N+1) (L[I] #= 0  #/\ L[I-1] #> 0) #=> sum([(Idx[J] #= I) : J in 1..Len+1]) #> 0 end.

print_board(NZ, NS, Board) =>
  foreach(I in 1..NZ, J in 1..NS)
     if Board[I,J]>0 then printf(" %1d", Board[I,J]) else print("  ") end,
     if J = NS then nl end
  end.