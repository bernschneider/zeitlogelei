/* Zeit Logelei 2016/24
   Hinweis: Andere Kreuzzahlrätsel werden gelöst, indem man die Zeilen 11-18 und 24-53 anpasst 
   Die Startkoordinaten und Längen der Zahlen müssen nicht angegeben werden. Sie werden in waagrecht(..) bzw. senkrecht(...) aus den Buchstaben berechnet 
   Für die Längenberechnung wird mit membchk nach dem nächsten Buchstaben in der Zeile bzw. Spalte gesucht, für den eine Cons-Regel existiert */

import cp.
import util.
main => go.

go =>
   LM = {{a,b,c,d,e,f},
		 {g,x,x,h,x,x},
	     {i,x,x,j,k,x},
	     {l,m,n,x,o,x},
	     {p,x,q,r,x,s},
	     {t,x,x,x,u,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,c,g,h,i,k,l,n,p,r,t,u], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,f,i,j,m,o,q,s], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = 6, ZAHL = 10, QSUM = 1, FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N),
   MVars = array_matrix_to_list(M),
   MVars :: 0..9,
   % Waagrecht:
   waagrecht(M,a,ZAHL,FWD,Aw), square(Aw),
   waagrecht(M,c,ZAHL,FWD,Cw), square(Cw),
   waagrecht(M,g,ZAHL,FWD,Gw), square(Gw),
   waagrecht(M,h,ZAHL,FWD,Hw), square(Hw),
   waagrecht(M,i,ZAHL,FWD,Iw), square(Iw),
   waagrecht(M,k,ZAHL,FWD,Kw), square(Kw),
   waagrecht(M,l,ZAHL,FWD,Lw), square(Lw),
   waagrecht(M,n,ZAHL,FWD,Nw), square(Nw),
   waagrecht(M,p,ZAHL,FWD,Pw), square(Pw),
   waagrecht(M,r,ZAHL,FWD,Rw), square(Rw),
   waagrecht(M,t,ZAHL,FWD,Tw), square(Tw),
   waagrecht(M,u,ZAHL,FWD,Uw), square(Uw),
   % Senkrecht:
   senkrecht(M,a,ZAHL,FWD,As), is_prime(As),
   senkrecht(M,b,ZAHL,FWD,Bs), cube(Bs),
   senkrecht(M,c,ZAHL,REV,RCs), multiple(RCs,RDs), 
   senkrecht(M,d,ZAHL,REV,RDs), is_prime(RDs),
   M[1,5] #= M[3,5], % palindrom(Es)
   senkrecht(M,e,ZAHL,FWD,Es), senkrecht(M,s,ZAHL,FWD,Ss), multiple(Es,Ss), 
   senkrecht(M,f,ZAHL,FWD,Fs), senkrecht(M,c,ZAHL,FWD,Cs), Fs #= Cs + Iw, 
   senkrecht(M,i,ZAHL,FWD,Is), waagrecht(M,a,ZAHL,REV,RAw), Is #= Uw * RAw,  
   senkrecht(M,j,ZAHL,FWD,Js), multiple(Js, Ss), 

   senkrecht(M,j,QSUM,FWD, QJs), waagrecht(M,a,ZAHL,REV,RAw), QJs #= RAw,

   senkrecht(M,m,ZAHL,FWD,Ms), senkrecht(M,q,ZAHL,FWD,Qs), multiple(Ms, Qs), 
   M[4,5] #= M[6,5], % palindrom(Os)
   is_prime(Qs),
   no_prime(Ss), 
   senkrecht(M,s,ZAHL,REV,RSs), is_prime(RSs),
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl.
   /*	
8 1 3 3 6 4 
3 2 4 2 8 9 
1 5 2 1 6 4 
1 6 3 3 6 4 
5 7 6 8 4 1 
2 1 1 6 6 4 
Waagerecht: A 81 C 3364 G 324 H 289 I 1521 K 64 L 16 N 3364 P 576 R 841 T 2116 U 64
Senkrecht:  A 83 B 125 C 3423 D 32 E 686 F 4944 I 1152 J 1386 M 671 O 646 Q 61 S 14
    */
    
multiple(X,A) => % X ist Vielfaches von A !PARAMETER VERTAUSCHT!
   X mod A #= 0.
   
is_prime(X) =>
   X #> 1,
   Max = fd_max(X),
   foreach(I in 2..(Max // 2))
      I #!= X #=> X mod I #> 0
   end.

no_prime(X) =>
	X = 1;
	(Max = fd_max(X),
	Tmp :: 2..Max, 2 * Tmp #=< X,
	X mod Tmp #= 0).

square(X) =>
   Max = fd_max(X),
   Tmp :: 0..Max,
   X #= Tmp**2.

cube(X) =>
   Max = fd_max(X),
   Tmp :: 0..Max,
   X #= Tmp**3.

waagrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N)
					if Len == 0, membchk(LM[R,Cn],WLetter) then Len := Cn - Col end
				end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
     		 M[Row,Col+I] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	

senkrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N)
					if Len == 0, membchk(LM[Rn,C],SLetter) then Len := Rn - Row end
				end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
      		M[Row+I,Col] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	
   
to_num(List, Base, Fwd, Num) => % Num = Wert der Liste
        Len = length(List), 
        Num #= cond(Fwd, sum([List[I]*Base**(Len-I) : I in 1..Len]), sum([List[I]*Base**(I-1) : I in 1..Len])).