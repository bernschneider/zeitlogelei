/* Zeit Logelei 203/02 Summen von Blöcken */
import sat, util.
main =>
  Max = 9, % Ziffern von 1..9
  SigZ = [ [22,17], [5,28,1], [3,8,30], [13,12,15], [15,3,21], [30,1,11], [15,8,14], [30,8,4], [10,19,15], [1,37,7], [13,8,24] ], % Zeilensignatur
  SigS = [ [20,25], [5,30,4], [27,6,5,2], [12,24,7], [20,25], [25,20], [13,1,4,13], [6,2,37], [3,10,5,15], [36,6,3], [1,6,2,28] ], % Spaltensignatur
  NZ = len(SigZ), NS = len(SigS),
  Board = new_array(NZ+1,NS+1), Board[NZ+1,NS+1] #= 0,	% End-0er angefügt für die Blockbildung
  foreach(Z in 1..NZ) Board[Z,NS+1] #= 0 end, 
  foreach(S in 1..NS) Board[NZ+1,S] #= 0 end,  
  Boardvars = array_matrix_to_list(Board), Boardvars :: 0..Max,  
  foreach(Row in rows(Board)) all_different_except_0(Row) end,
  foreach(Col in columns(Board)) all_different_except_0(Col) end,
  foreach(Z in 1..NZ) signature(NS, Max, [Board[Z,S] : S in 1..NS+1], SigZ[Z]) end,
  foreach(S in 1..NS) signature(NZ, Max, [Board[Z,S] : Z in 1..NZ+1], SigS[S]) end,
  solve(Boardvars), 
  print_board(NZ, NS, Board).
/*
   5 9 8       6 3 7 1
 5   3 4 8 6 7     1  
 3   8   9 1 6 2 7 5  
 4 2 7   3 9     1 8 6
 8 7   3   5 1 9 2 4  
   8 6 5 7 4   1   9 2
 6 9   7 1   4 3 5 2  
 2 1 5 9 6 7   8     4
 7 3     2 8 5 4   6 9
 1   2 6 4 3 8 5 9   7
 9 4   1 5 2   7 6 3 8
CPU time 10.449 seconds korrekt */
signature(N, Max, L, Sig) =>     % berechnet L aus Sig! Kein solve(Idx) nötig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig), Idx = new_list(Len+1), Idx :: 0..N+1,       % Indices der End-0er
	foreach(J in 1..Len)
   	  I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1, I1 #> 1,
   	  element(I1,L,0),     	% I1 zeigt auf eine 0
   	  sum([ L[I] * (I0 #< I) * (I #< I1) : I in 1..N]) #= Sig[J]  % berechne die Teilsumme S
   end, 
   % Vor dem ersten Index stehen nur 0er:
   foreach(I in 1..N) (Idx[1] #< I) #\/ (L[I] #= 0) end,
   % 0er hinter Nicht-0ern müssen ein Index sein (dürfen nicht sonstwo stehen): > 1 5 >0 0 0 3 4 >0
   foreach(I in 2..N+1) (L[I] #= 0  #/\ L[I-1] #> 0) #=> sum([(Idx[J] #= I) : J in 1..Len+1]) #> 0 end.

print_board(NZ, NS, Board) =>
  foreach(I in 1..NZ, J in 1..NS)
     if Board[I,J]>0 then printf(" %1d", Board[I,J]) else print("  ") end,
     if J = NS then nl end
  end.