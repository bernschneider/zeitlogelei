/* Zeit Logelei 203/27 Summen von Blöcken
Am Rand wurden alle Ziffern durch Buchstaben ersetzt! */
import sat, util.
main =>
  Max = 6, % Ziffern von 1..6
  Letter = [A,B,C,D,E, G,H,I,J], Letter :: 1..9, % F = 0, weil F nie allein steht 
  all_different(Letter), 
  CA #= C*10+A, CD #= C*10+D, CF #= C*10, CJ #= C*10+J, CE #= C*10+E,
  SigZ = [ [CJ], [B,H,CF], [E,B,H], [H,D,E,CF], [G,C,D], [J,D,H], [G,CE], [C,G,D] ], % Zeilensignatur
  SigS = [ [B,CF,C], [C,E,CD], [D,D,D], [A,B,C,D], [B,E,A,H], [CA,I], [A,G,E], [A,CA] ], % Spaltensignatur
  NZ = len(SigZ), NS = len(SigS),
  Board = new_array(NZ+1,NS+1), Board[NZ+1,NS+1] #= 0,	% End-0er angefügt für die Blockbildung
  foreach(Z in 1..NZ) Board[Z,NS+1] #= 0 end, 
  foreach(S in 1..NS) Board[NZ+1,S] #= 0 end,  
  Boardvars = array_matrix_to_list(Board), Boardvars :: 0..Max,  
  foreach(Row in rows(Board)) all_different_except_0(Row) end,
  foreach(Col in columns(Board)) all_different_except_0(Col) end,
  foreach(Z in 1..NZ) signature(NS, Max, [Board[Z,S] : S in 1..NS+1], SigZ[Z]) end,
  foreach(S in 1..NS) signature(NZ, Max, [Board[Z,S] : Z in 1..NZ+1], SigS[S]) end,
  solve(Letter ++ [CA,CD,CF,CJ,CE] ++ SigZ ++ SigS ++ Boardvars), 
  println(letter=Letter), println(sigZ=SigZ), println(sigS=SigS),
  print_board(NZ, NS, Board).
/*        A B C D E G H I J   (F = 0) 
letter = [4,6,1,5,2,9,3,7,8]
sigZ = [[18],[6,3,10],[2,6,3],[3,5,2,10],[9,1,5],[8,5,3],[9,12],[1,9,5]]
sigS = [[6,10,1],[1,2,15],[5,5,5],[4,6,1,5],[6,2,4,3],[14,7],[4,9,2],[4,14]]
   1 2 4 5 6    
 6   3   1 5 4  
   2   6   3    
 3   5   2   6 4
 5 4   1   2 3  
 2 6     4 1   3
   5 1 3   4 2 6
 1   4 2 3     5
CPU time 2.418 seconds korrekt */
signature(N, Max, L, Sig) =>     % berechnet L aus Sig! Kein solve(Idx) nötig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig), Idx = new_list(Len+1), Idx :: 0..N+1,       % Indices der End-0er
	foreach(J in 1..Len)
   	  I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1, I1 #> 1,
   	  element(I1,L,0),     	% I1 zeigt auf eine 0
   	  sum([ L[I] * (I0 #< I) * (I #< I1) : I in 1..N]) #= Sig[J]  % berechne die Teilsumme S
   end, 
   % Vor dem ersten Index stehen nur 0er:
   foreach(I in 1..N) (Idx[1] #< I) #\/ (L[I] #= 0) end,
   % 0er hinter Nicht-0ern müssen ein Index sein (dürfen nicht sonstwo stehen): > 1 5 >0 0 0 3 4 >0
   foreach(I in 2..N+1) (L[I] #= 0  #/\ L[I-1] #> 0) #=> sum([(Idx[J] #= I) : J in 1..Len+1]) #> 0 end.

print_board(NZ, NS, Board) =>
  foreach(I in 1..NZ, J in 1..NS)
     if Board[I,J]>0 then printf(" %1d", Board[I,J]) else print("  ") end,
     if J = NS then nl end
  end.