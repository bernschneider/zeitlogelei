/* Zeit Logelei 2014/40 */
import cp.
import util.
% Returns the list/array M[I,Range2]
slice2(Matrix, I,Range2) = [ Matrix[I,J] : J in Range2], list(Matrix), integer(I),list(Range2) => true.
% Returns the list/array M[Range1,J]
slice2(Matrix, Range1,J) = [Matrix[I,J] : I in Range1 ], list(Matrix), list(Range1), integer(J) => true.
% Returns the list/array matrix M[Range1,Range2]
slice2(Matrix, Range1,Range2) = [ [Matrix[I,J] : I in Range1 ] : J in Range2], list(Matrix) => true.

print_board(Board) =>
   N = Board.length,
   foreach(I in 1..N)
      foreach(J in 1..N)
         X = Board[I,J],
		 printf("  %w", X)
      end,
      nl
   end.
   
main => 
	Primes = [11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97],
    Board = [[29, _,11, _], % 4. Spalte = Spaltensummen
	         [37, _, _, _],
			 [ _,47, _, _],
			 [ _, _, _, _]], % 4. Zeile = Zeilensummen und 1. Diagonale
	Diag2 = _,   % 2. Diagonale
    Vars = [Diag2 | array_matrix_to_list(Board)],
    Vars :: Primes,
	all_different(Vars),
	foreach(I in 1..3)
      sum(Board.slice2(I,1..3)) #= Board[I,4],
      sum(Board.slice2(1..3,I)) #= Board[4,I]
    end,
    Board[1,1] + Board[2,2] + Board[3,3] #= Board[4,4],
    Board[3,1] + Board[2,2] + Board[1,3] #= Diag2,
	solve(Vars),
    print_board(Board),
	printf("%w (2. Diagonale)\n",Diag2).
/*   
  29  31  11  71
  37  19  17  73
  23  47  13  83
  89  97  41  61
53 (2. Diagonale)
ZEIT-LÃ¶sung: Zeilenweise: 29 31 11, 37 19 17, 23 47 13 -> korrekt!
*/