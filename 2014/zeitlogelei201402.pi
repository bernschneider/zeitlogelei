/* Zeit Logelei 2014/02 Kreuzzahl-Rätsel 
   Hinweis: Andere Kreuzzahlrätsel werden gelöst, indem man die Zeilen 11-18 und 24-53 anpasst 
   Die Startkoordinaten und Längen der Zahlen müssen nicht angegeben werden. Sie werden in waagrecht(..) bzw. senkrecht(...) aus den Buchstaben berechnet 
   Für die Längenberechnung wird mit membchk nach dem nächsten Buchstaben in der Zeile bzw. Spalte gesucht, für den eine Cons-Regel existiert */
import sat, util.
main =>
   LM = {{a,b,c,d,e,f},
		 {g,x,x,x,h,x},
	     {i,x,x,j,k,x},
	     {l,x,m,n,x,o},
	     {p,q,r,x,x,x},
	     {s,x,x,t,x,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,d,g,h,i,j,l,n,p,r,s,t], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,f,k,l,m,n,o,q], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = 6, ZAHL = 10, QSUM = 1, FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N), MVars = array_matrix_to_list(M), MVars :: 0..9,
   % Waagrecht:
   waagrecht(M,a,ZAHL,FWD,Aw), square(Aw),
   waagrecht(M,d,ZAHL,FWD,Dw), multiple(Es,Dw),
   waagrecht(M,g,ZAHL,FWD,Gw), Gw #= Ks + Rw,
   waagrecht(M,h,ZAHL,FWD,Hw), no_prime(Hw),
   waagrecht(M,i,ZAHL,FWD,Iw), square(Iw),
   waagrecht(M,j,ZAHL,FWD,Jw), is_cube(Jw),
   waagrecht(M,l,ZAHL,FWD,Lw), square(Lw),  
   waagrecht(M,n,LNw), prod(LNw) #= Dw,
   waagrecht(M,p,ZAHL,FWD,Pw), % s.u.
   waagrecht(M,p,ZAHL,REV,RPw), is_prime(RPw),
   waagrecht(M,r,ZAHL,FWD,Rw), % s.o. 
   waagrecht(M,r,LRw), prod(LRw) #= Bs, % s.o.
   waagrecht(M,s,ZAHL,FWD,Sw), Sw #= Pw + Qs,
   waagrecht(M,t,ZAHL,FWD,Tw), Tw mod 2 #= 1,
   % Senkrecht:
   senkrecht(M,a,LAs), palindrom(LAs),
   senkrecht(M,b,ZAHL,FWD,Bs), multiple(Pw,Bs),               
   senkrecht(M,c,ZAHL,FWD,Cs), Cs mod 2 #= 0,
   senkrecht(M,d,LDs), palindrom(LDs), 
   senkrecht(M,e,ZAHL,FWD,Es), square(Es), % s.o.
   senkrecht(M,f,ZAHL,FWD,Fs), square(Fs), 
   senkrecht(M,k,ZAHL,FWD,Ks), Ks #= Tw + Os, % s.o.
   senkrecht(M,l,LLs), palindrom(LLs),
   senkrecht(M,m,ZAHL,FWD,Ms), multiple(Qs,Ms),
   senkrecht(M,n,ZAHL,FWD,Ns), square(Ns), 
   senkrecht(M,o,ZAHL,FWD,Os), square(Os), % s.o.
   senkrecht(M,q,ZAHL,FWD,Qs), % s.o.
   senkrecht(M,q,LQs), palindrom(LQs), 
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl. %, fail.
/*
2 2 5 2 2 5 
9 3 6 8 5 7 
2 5 6 2 1 6 
1 2 1 5 5 9 
9 8 7 7 8 6 
1 8 6 6 2 1 
CPU time 3.122 seconds korrekt */
multiple(A,X) => % X ist Vielfaches von A
   X mod A #= 0, A #!= X.
   
is_prime(X) =>
   X :: primes(1000).

no_prime(X) =>
   NP = [I : I in 1..99, not prime(I)],
   [X] :: NP.

square(X) =>
   SQ = [I*I : I in 1..99], X :: SQ.

is_cube(X) => 
   SC = [I*I*I : I in 1..9], X :: SC.

gleicheZiffern(L1, L2) =>
    foreach(Z in L1) element(_,L2,Z) end,
    foreach(Z in L2) element(_,L1,Z) end.

gleicheParitaet(L) =>
    Par :: 0..1,
    foreach(Z in L) Z mod 2 #= Par end.

nichtgleicheParitaet(L) =>
    sum([(Z mod 2 #= 0) : Z in L]) #> 0,
    sum([(Z mod 2 #= 1) : Z in L]) #> 0.

palindrom(L) =>
    N = len(L),
    foreach(I in 1..N//2) L[I] #= L[N + 1 - I] end.

waagrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
        waagrecht(M,Letter,Tmp), to_num(Tmp, Base, Fwd, X).

waagrecht(M,Letter,Tmp) =>
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N, LM[R,C] = Letter) Row := R, Col := C end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N, Len == 0, membchk(LM[R,Cn],WLetter)) Len := Cn - Col end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: 0..9,
   		foreach(I in 0..Len-1) M[Row,Col+I] #= Tmp[I+1] end,
		M[Row,Col] #!= 0.	

senkrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
        senkrecht(M,Letter,Tmp), to_num(Tmp, Base, Fwd, X).

senkrecht(M,Letter,Tmp) =>
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N, LM[R,C] = Letter) Row := R, Col := C end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N, Len == 0, membchk(LM[Rn,C],SLetter)) Len := Rn - Row end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: 0..9,
   		foreach(I in 0..Len-1) M[Row+I,Col] #= Tmp[I+1] end,
		M[Row,Col] #!= 0.	
   
to_num(List, Base, Fwd, Num) => % Num = Wert der Liste
        Len = length(List), 
        Num #= cond(Fwd, sum([List[I]*Base**(Len-I) : I in 1..Len]), sum([List[I]*Base**(I-1) : I in 1..Len])).