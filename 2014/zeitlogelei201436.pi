import sat, util.
main =>
    Hsum = [27,8,20,0,29,17,9,36,9],
    Vsum = [5,18,36,22,12,0,9,34,15],
    Board= {{_,_,_, _,_,1, _,_,_},
            {_,_,_, _,_,_, _,_,_},
            {_,2,_, _,_,_, _,_,_},
            {_,_,_, 1,_,_, _,7,_},
            {_,_,_, _,6,_, _,_,_},
            {_,1,_, _,_,8, _,_,_},
            {_,_,_, _,_,_, _,5,_},
            {_,_,_, _,_,_, _,_,_},
            {_,_,_, 4,_,_, _,_,_}},
    sudoku(Hsum,Vsum,Board),
    foreach(Row in Board) writeln(Row) end.

sudoku(Hsum,Vsum,Board) =>
    N = Board.len, M = round(sqrt(N)), Board :: 1..N,
    foreach({Hinter9,L} in zip(Hsum,Board.rows()) ++ zip(Vsum,Board.columns())) 
        all_different(L), signature(Hinter9, L) 
    end,
    foreach (I in 1..M..N-M, J in 1..M..N-M)
        all_different([Board[I+K,J+L] : K in 0..M-1, L in 0..M-1]) 
    end,
    solve(Board).
/*
{4,5,9,8,7,1,3,2,6}
{1,3,7,6,2,4,5,9,8}
{8,2,6,9,5,3,1,4,7}
{2,8,3,1,4,5,6,7,9}
{7,9,4,3,6,2,8,1,5}
{6,1,5,7,9,8,4,3,2}
{3,6,1,2,8,7,9,5,4}
{9,4,2,5,1,6,7,8,3}
{5,7,8,4,3,9,2,6,1}
CPU time 8.072 seconds korrekt */
signature(Hinter9,L) =>
    I9 :: 1..9, element(I9, L, 9),
    Hinter9 #= sum([(I9 #< I)*L[I] : I in 2..9]).