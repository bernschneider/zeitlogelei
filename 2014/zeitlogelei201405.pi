/* Zeit Logelei 2014/05 Alphametik. 
Fehlende Teilrechnung mit "" erg채nzen! (siehe Zeilen 45f) */
import cp, util.

main =>
    add(["EIS", "WIND", "SAND", "WONNE"]), /*
   238
  1357
  8957
------
 10552 korrekt */
    mult(["WIND", "SAND", "PGGUI", "", "UUWGD", "PWIWN", "PEINIGEN"]). /* 
5064 * 3764
-----------
18820
      0
  22584
   15056
-----------
19060896 korrekt */
add(L) => % das letzte Element von L ist die Summe der vorherigen Elemente
   Letter = keys(new_set(flatten(L))), % verwendete Buchstaben
   Digit = new_list(len(Letter)), Digit :: 0..9, % eine Ziffer je Buchstabe
   all_different(Digit),
   Zeilen = len(L) - 1, % Anzahl der Summanden, im Beispiel = 2
   Num = new_array(len(L)), % numerische Repr채sentation der Elemente von L
   foreach(I in 1..len(L))
       S = [Digit[find_first_of(Letter, C)] : C in L[I]], % Convert Letter C -> Digit
       to_num(S, Num[I]), S[1] #!= 0
   end,
   sum([Num[I] : I in 1.. Zeilen]) #= Num[len(L)],
   solve(Digit ++ Num),
   foreach(I in 1..Zeilen) printf("%6d%n", Num[I]) end,
   printf("------%n"),
   printf("%6d%n%n", Num[len(L)]).

mult(L) => % L[1] * L[2] = L[len(L)]; dazwischen stehen die Teilrechnungen
   Letter = keys(new_set(flatten(L))), % verwendete Buchstaben
   Digit = new_list(len(Letter)), Digit :: 0..9, % eine Ziffer je Buchstabe
   all_different(Digit),
   Zeilen = len(L[1]), % Anzahl der Teilrechnungen, im Beispiel = 4
   LenZeile = max([len(L[2+I]) : I in 1..Zeilen]), % maximale L채nge der Zeilen, im Beispiel = 5
   Num = new_array(len(L)), % numerische Repr채sentation der Elemente von L
   foreach(I in 1..len(L))
     if L[I] = "" 
        then Num[I] #= 0
        else 
             S = [Digit[find_first_of(Letter, C)] : C in L[I]], % Convert Letter C -> Digit
             to_num(S, Num[I]), S[1] #!= 0
        end
   end,
   Num[1] * Num[2] #= Num[len(L)], % Hauptgleichung (im Beispiel DEZI * WERT = PARKZEIT)
   L1 = L[1],
   foreach(I in 1..Zeilen) % zeilenweise Teilrechnung:
       Digit[find_first_of(Letter, L1[I])] * Num[2] #= Num[2+I]
   end,
   solve(Digit ++ Num),
   printf("%d * %d%n", Num[1], Num[2]),
   printf("-----------%n"),
   foreach(I in 1..Zeilen)
       foreach(_ in 2..I+LenZeile-len(L[2+I])) print(' ') end, % Indent
       println(Num[2+I])
   end,
   printf("-----------%n"),
   printf("%d%n%n", Num[len(L)]).
   
to_num(List, Num) => 
        Len = length(List),
        Num #= sum([List[I]*10**(Len-I) : I in 1..Len]).