/* Zeit Logelei 2008/42 Professor Knusi auf Ubasi
https://www.zeit.de/zeit-magazin/2021/42/logelei */
import sat, util.
main =>
  Max = 6, % Ziffern von 1.6
  SigZ = [ [4,15,12], [1,6,60], [15,24,1], [2,5,72], [36,1,20] ],             % Zeilensignatur
  SigS = [ [24], [5,2], [30,3], [3,4,6], [90], [4,1], [40], [6,12], [1,30] ], % Spaltensignatur
  NZ = len(SigZ), NS = len(SigS),
  Board = new_array(NZ+1,NS+1), Board[NZ+1,NS+1] #= 0,	% End-0er angefügt für die Blockbildung
  foreach(Z in 1..NZ) Board[Z,NS+1] #= 0 end, 
  foreach(S in 1..NS) Board[NZ+1,S] #= 0 end,  
  Boardvars = array_matrix_to_list(Board), Boardvars :: 0..Max,  
  foreach(Row in rows(Board)) all_different_except_0(Row) end,
  foreach(Col in columns(Board)) all_different_except_0(Col) end,
  foreach(Z in 1..NZ) signature(NS, Max, [Board[Z,S] : S in 1..NS+1], SigZ[Z]) end,
  foreach(S in 1..NS) signature(NZ, Max, [Board[Z,S] : Z in 1..NZ+1], SigS[S]) end,
  solve(Boardvars), print_board(NZ, NS, Board). /* 
 4   5 3     2 6 1
 1   6   3 4 5    
 3 5   4 6   1    
 2       5   4 3 6
   2 3 6   1   4 5
CPU time 30.189 seconds, korrekt */
signature(N, Max, L, Sig) =>     % berechnet L aus Sig! Kein solve(Idx) nötig!
  L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
  Len = len(Sig), Idx = new_list(Len+1), Idx :: 0..N+1,       % Indices der End-0er
  foreach(J in 1..Len)
   	I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1, I1 #> 1,
   	element(I1,L,0),     	                 % I1 zeigt auf eine 0
    I11 #= I1 - 1, element(I11,L,V), V #> 0, % davor steht eine Zahl 1..6
   	prod([ L[I] * (I0 #< I) * (I #< I1)  % berechne das Teilprodukt des Blocks; dabei zählen ..
        + (L[I] #= 0 #\/ I0 #>= I #\/ I #>= I1): I in 1..N]) #= Sig[J] %.. 0er und Werte bis I0 bzw. ab I1 als 1
  end, 
  foreach(I in 1..N) (Idx[1] #< I) #\/ (L[I] #= 0) end, % vor dem ersten Index stehen nur 0er
  % 0er hinter Nicht-0ern müssen ein Index sein (dürfen nicht sonstwo stehen): > 1 5 >0 0 0 3 4 >0
  foreach(I in 2..N+1) (L[I] #= 0  #/\ L[I-1] #> 0) #=> sum([(Idx[J] #= I) : J in 1..Len+1]) #> 0 end.

print_board(NZ, NS, Board) =>
  foreach(I in 1..NZ, J in 1..NS)
     if Board[I,J]>0 then printf(" %1d", Board[I,J]) else print("  ") end,
     if J = NS then nl end
  end.