/* Zeit Logelei 2018/17
http://www.zeit.de/2018/17/spiele-logelei-17 */
import sat. 
main => 
   C = {{5,4,4,5,4,6,2,5,5,1,4,3,1,1},
        {6,5,3,2,2,4,3,1,2,5,2,6,1,3},
        {6,6,4,5,2,1,3,4,2,6,3,1,6,3}},
   NZ = len(C), NS = len(C[1]),
   M = new_array(NZ,NS), Mvars = vars(M),
   Vals = [A*10+B: A in 1..6, B in A..6], M :: Vals, % alle möglichen Dominos, o.E. A <= B
   global_cardinality(Mvars, [$X-2 : X in Vals]),
   foreach(I in 1..NZ, J in 1..NS)
        form_domino(M,I,J),
        C[I,J] #= M[I,J] mod 10 #\/ C[I,J] #= M[I,J] div 10
   end,
   % Dies nur zur Sicherheit (obiges reicht eigentlich):
   /*foreach(I in 1..NZ, J in 1..NS-1)
        M[I,J] #= M[I,J+1] #=> 
        (min(C[I,J],C[I,J+1]) #= M[I,J] div 10 #/\ max(C[I,J],C[I,J+1]) #= M[I,J] mod 10)
   end,   
   foreach(I in 1..NZ-1, J in 1..NS)
        M[I,J] #= M[I+1,J] #=> 
        (min(C[I,J],C[I+1,J]) #= M[I,J] div 10 #/\ max(C[I,J],C[I+1,J]) #= M[I,J] mod 10)
   end,*/   
   solve(Mvars),
   foreach(Z in 1..NZ) 
      foreach(S in 1..NS)
          H = M[Z,S] div 10, L = M[Z,S] mod 10,
          if H = C[Z,S] then print(">") else print(" ") end,
          printf("%1d",H),
          if L = C[Z,S] then print(">") else print(" ") end,
          printf("%1d|",L),         
	end, nl
   end.
/* 
% start SAT solving...datime(118,3,18,17,52,50)
56|44|44|25|46|46|23|55|55|15|24|36|11|11|
56|35|35|25|22|14|23|12|12|15|24|36|16|33|
66|66|45|45|22|14|34|34|26|26|13|13|16|33|
CPU time 2.866 seconds. 
Zeilenweise, s steht für senkrecht, w für waagerecht: swwswwswwsssww, swwsssswwsssss, wwwwsswwwwwwss 
*/
alpha =>
   Vars = [C,L,A,S,D,O,M,I,N,E],
   Vars :: 0..9,
   all_different(Vars),
   to_num([C,L,A,A,S], CLAAS), to_num([D,O,M,I,N,O], DOMINO), to_num([A,N,M,A,L,E,N], ANMALEN),      
   C #!= 0, D #!= 0, A #!= 0,
   CLAAS + DOMINO #= ANMALEN,
   solve(Vars ++ [CLAAS, DOMINO, ANMALEN]),
   printf("  %d\n", CLAAS),
   printf(" %d\n", DOMINO), 
   print("-------\n"),
   println(ANMALEN).
/* 
  85113
 976407
-------
1061520 CPU time 5.731 seconds. korrekt */

% Exactly one of A[I,J]'s neighbors is the same as A[I,J]
form_domino(A,I,J)=>
     NZ = len(A), NS = len(A[1]),
     sum([(A[I1,J1]#=A[I,J]) : I1 in I-1..I+1, J1 in J-1..J+1, (I1>0,I1=<NZ,J1>0,J1=<NS,(I1=I;J1=J),(I,J)!=(I1,J1))]) #= 1.

to_num(List, Num) => 
        Len = length(List), Num #= sum([List[I]*10**(Len-I) : I in 1..Len]).