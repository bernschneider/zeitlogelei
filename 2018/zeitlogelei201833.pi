/* Zeit Logelei 2018/33 Zahlenpyramide */
import cp.

main =>
    M = {{1,0,0, 0,0,0, 0,0,0},
         {_,_,0, 0,0,0, 0,0,0},
         {5,_,_, 0,0,0, 0,0,0},
         {_,1,_, _,0,0, 0,0,0},
         {_,_,1, _,_,0, 0,0,0},
         {7,_,_, 2,_,_, 0,0,0},
         {_,9,_, _,5,_, _,0,0},
         {_,_,2, _,_,8, _,_,0},
         {_,_,_, 5,_,_, 2,_,_}},
    % F端r die Pyramide gilt, dass nur Zahlen von 1 bis 9 eingetragen werden d端rfen:
    M :: 0..9,
    foreach(Z in 1..9, S in 1..Z) M[Z,S] #> 0 end,
    % ... und dass in jeder Zeile jede Zahl nur maximal einmal vorkommen darf:
    foreach(Row in M) all_different_except_0(Row) end,
    % Jede Zahl, die sich 端ber zwei anderen Zahlen befindet, 
    % ist die Summe oder die Differenz der beiden Zahlen darunter:
    foreach(Z in 1..8, S in 1..Z)
        M[Z,S] #= M[Z+1,S] + M[Z+1,S+1] #\/ M[Z,S] #= abs(M[Z+1,S] - M[Z+1,S+1]) 
    end,
    solve_all(M) = Sols, println(solutions=len(Sols)),
    solve(M),
    foreach(Z in 1..9, S in Z-8..Z)  % je Zeile 8..0 = f端hrende Blanks, dann 1..9 Zahlen
        if S<1 then print(" ") else printf("%d ", M[Z,S]) end, 
        if S=Z then nl end
    end.
/* solutions = 1
        1 
       3 4 
      5 8 4 
     6 1 9 5 
    4 2 1 8 3 
   7 3 1 2 6 9 
  2 9 6 7 5 1 8 
 5 7 2 4 3 8 9 1 
1 4 3 5 9 6 2 7 8 
CPU time 0.003 seconds. korrekt */