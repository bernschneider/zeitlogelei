/* Zeit Logelei 2018/13
http://www.zeit.de/2018/13/spiele-logelei-13 nach Janko Trinudo */
import sat. 
main =>  % 9 x 9
   N = 9,
   % Um Gebiete gleicher Größe zu unterscheiden, nehmen wir die Farben 0..3 und addieren Vielfache von 4
   NoC = 11*4, % Number of Colors; in diesem Fall versuchen wir es mit 12 1ern: F = 0, 4, ... 11*4
   M = new_array(N,N), M :: (-1)..NoC, Mvars = vars(M), % -1 = zusätzliches Gebiet
   % (Da es allein mit Gebieten der Größen 1..4 keine Lösung gibt, fügen wir ein sehr großes Gebiet -1 hinzu.) 
   Mm = {{0,0,0,0,1,0,1,0,0},
         {0,1,0,0,0,0,2,0,0},
         {1,2,0,4,0,3,3,1,0},
         {0,0,0,0,0,0,0,0,1},
         {0,2,3,1,0,0,0,0,2},
         {0,4,0,0,0,3,4,0,0},
         {0,0,0,4,0,0,0,0,2},
         {0,2,4,2,0,2,0,4,0},
         {1,0,0,0,0,1,0,0,0}},
   foreach(Z in 1..N, S in 1..N, Mm[Z,S]>0)
        M[Z,S] #>= 0, M[Z,S] mod 4 + 1 #= Mm[Z,S] % Modulo 4 + 1 muss es übereinstimmen!
   end,
   % Gebiete gleicher Größe dürfen nicht orthogonal benachbart sein.
   foreach(Z in 1..N, S in 1..N-1)
	(M[Z,S] #>= 0 #/\ M[Z,S+1] #>= 0 #/\ M[Z,S] mod 4 #= M[Z,S+1] mod 4) #=> M[Z,S] #= M[Z,S+1]
   end,   
   foreach(Z in 1..N-1, S in 1..N)
	(M[Z,S] #>= 0 #/\ M[Z+1,S] #>= 0 #/\ M[Z,S] mod 4 #= M[Z+1,S] mod 4) #=> M[Z,S] #= M[Z+1,S]
   end,  
   Neib = new_array(N,N), Neib :: 0..4, % Zahl der orthogonalen Nachbarn
   foreach(Z in 1..N, S in 1..N)
      Neib[Z,S] #= sum([(M[Z1,S1] #= M[Z,S]) : {Z1,S1} in [{Z-1,S},{Z+1,S},{Z,S-1},{Z,S+1}], 0<Z1,Z1=<N,0<S1,S1=<N]),
	M[Z,S] mod 4 + 1 #= 1 #=> % 1er haben keinen Nachbarn:
		sum([(M[Z1,S1] #= M[Z,S]) : {Z1,S1} in [{Z-1,S},{Z+1,S},{Z,S-1},{Z,S+1}], 0<Z1,Z1=<N,0<S1,S1=<N]) #= 0, 
	M[Z,S] mod 4 + 1 #= 2 #=>  % 2er haben genau einen Nachbarn:
		sum([(M[Z1,S1] #= M[Z,S]) : {Z1,S1} in [{Z-1,S},{Z+1,S},{Z,S-1},{Z,S+1}], 0<Z1,Z1=<N,0<S1,S1=<N]) #= 1
   end,
   % Vorkommende K=3er und 4er haben meistens eine Nachbarsumme = 2*(K-1)
   foreach(C in 2..NoC, C mod 4 >= 2)
        sum([(M[Z,S] #= C) : Z in 1..N, S in 1..N]) #> 0 #=> % C kommt vor
            sum([Neib[Z,S]*(M[Z,S] #= C) : Z in 1..N, S in 1..N]) #= 2 * (C mod 4) 
   end,
   foreach(F in 0..NoC)
   	Cnt #= sum([(M[Z,S]#=F): Z in 1..N, S in 1..N]),
   	Cnt #= 0 #\/ Cnt #= F mod 4 + 1 % Eine vorkommende Farben F gibt es [F mod 4 + 1] mal
   end,
   % Das (-1)-Gebiet hängt zusammen:
   Dist = new_array(N,N), DistVars = vars(Dist), MaxDist = 10, Dist :: 0..MaxDist,
   M[1,6] #= (-1), Dist[1,6] #= 0, % zwischen den 1ern der 1. Zeile ist ein Anker
   foreach(Z in 1..N, S in 1..N, (Z,S) != (1,6))
   	M[Z,S] #< 0  #=> Dist[Z,S] #= 1 + min([ Dist[Z1,S1] : (Z1,S1) in [(Z-1,S),(Z,S-1),(Z,S+1),(Z+1,S)], Z1 >= 1, Z1 =< N, S1 >= 1, S1 =< N ]), 
   	M[Z,S] #>= 0 #=> Dist[Z,S] #= MaxDist 
   end,
   count(-1, Mvars, Cnt), % Größe des (-1)-Gebiets
   solve(Mvars ++ vars(Neib) ++ DistVars ++ [Cnt]),
   foreach(Z in 1..N) 
      foreach(S in 1..N)
          if M[Z,S]= (-1) then printf("%2d|",Cnt) else printf("%2d|",M[Z,S] mod 4 + 1) end
	end, nl
   end.
/* 
 3| 3| 1| 4| 1|18| 1| 4| 4|
 3| 1| 4| 4|18|18| 2| 2| 4|
 1| 2| 2| 4|18| 3| 3| 1| 4|
18|18|18|18|18| 3|18|18| 1|
 2| 2| 3| 1|18|18|18| 2| 2|
 4| 4| 3| 3|18| 3| 4| 4| 1|
 4| 1| 4| 4|18| 3| 3| 4| 2|
 4| 2| 4| 2|18| 2| 2| 4| 2|
 1| 2| 4| 2|18| 1| 3| 3| 3|
CPU time 77.0 seconds. korrekt! */   
