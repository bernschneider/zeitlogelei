/* Zeit Logelei 2018/52 Kreuzzahlen */
import cp, util.
main =>
   LM = {{a,b,c,d,e,f},
		 {g,x,x,h,x,x},
	     {i,x,x,j,k,x},
	     {l,m,n,x,o,x},
	     {p,x,q,r,x,s},
	     {t,x,x,x,u,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,c,g,h,i,k,l,n,p,r,t,u], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,f,i,j,m,o,q,s], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = len(LM), ZAHL = 10, QSUM = 1, FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N), MVars = array_matrix_to_list(M), MVars :: 0..9,
   Primes = primes(99), Cubes = [I*I*I : I in 1..9],
   % Waagrecht:
   waagrecht(M,a,ZAHL,REV,RAw), senkrecht(M,a,ZAHL,REV,RAs), multiple(RAw, RAs),
   waagrecht(M,c,ZAHL,REV,RCw), RCw #= Fs - Gw,
   waagrecht(M,g,ZAHL,FWD,Gw), waagrecht(M,a,QSUM,FWD,QAw), Gw #= QAw * QAw,
   waagrecht(M,h,ZAHL,REV,RHw), square(RHw),
   waagrecht(M,i,ZAHL,FWD,Iw), Iw #= Cs + Js,
   waagrecht(M,k,ZAHL,FWD,Kw), Kw :: Primes,
   waagrecht(M,l,ZAHL,REV,RLw), RLw :: Primes,
   palindrom([M[4,J] : J in 3..6]), % C Palindrom
   waagrecht(M,p,ZAHL,FWD,Pw), Pw :: Cubes,
   waagrecht(M,r,ZAHL,FWD,Rw), waagrecht(M,k,ZAHL,REV,RKw), multiple(Rw, RKw), 
   waagrecht(M,t,ZAHL,FWD,Tw), waagrecht(M,n,ZAHL,FWD,Nw), Tw #= Fs + Nw,
   waagrecht(M,u,ZAHL,FWD,Uw), Uw #= As - Kw,
   % Senkrecht: a,b,c,d,e,f,i,j,m,o,q,s
   senkrecht(M,a,ZAHL,FWD,As), multiple(As,Kw),
   senkrecht(M,b,ZAHL,FWD,Bs), multiple(Bs,Kw),
   senkrecht(M,c,ZAHL,FWD,Cs), multiple(Cs,Kw),
   senkrecht(M,d,ZAHL,FWD,Ds), multiple(Ds,Kw),
   senkrecht(M,e,ZAHL,FWD,Es), multiple(Es,Kw),
   senkrecht(M,f,ZAHL,FWD,Fs), multiple(Fs,Kw),
   senkrecht(M,i,ZAHL,FWD,Is), multiple(Is,Kw),
   senkrecht(M,j,ZAHL,FWD,Js), multiple(Js,Kw),
   senkrecht(M,m,ZAHL,FWD,Ms), multiple(Ms,Kw),
   senkrecht(M,o,ZAHL,FWD,Os), multiple(Os,Kw),
   senkrecht(M,q,ZAHL,FWD,Qs), multiple(Qs,Kw),
   senkrecht(M,s,ZAHL,FWD,Ss), multiple(Ss,Kw),
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl.
/*
5 7 3 3 2 1 
1 4 4 4 2 3 
4 8 1 1 1 7 
3 5 7 3 3 7 
1 2 5 9 2 3 
8 7 1 4 3 4 
CPU time 0.108 seconds. */

multiple(X,A) => % X ist Vielfaches von A
   X mod A #= 0.
   
square(X) =>
   Max = fd_max(X), 
   Tmp :: 0..Max,
   X #= Tmp*Tmp.

palindrom(L) =>
    N = len(L),
    foreach(I in 1..N//2)
        L[I] #= L[N + 1 - I]
    end.

waagrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N)
					if Len == 0, membchk(LM[R,Cn],WLetter) then Len := Cn - Col end
				end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
     		 M[Row,Col+I] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	

senkrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N)
					if Len == 0, membchk(LM[Rn,C],SLetter) then Len := Rn - Row end
				end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
      		M[Row+I,Col] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	
   
to_num(List, Base, Fwd, Num) => % Num = Wert der Liste
        Len = length(List), 
        Num #= cond(Fwd, sum([List[I]*Base**(Len-I) : I in 1..Len]), sum([List[I]*Base**(I-1) : I in 1..Len])).