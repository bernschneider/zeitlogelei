/* Zeit Logelei 2019/27 Kreuzzahlen */
import cp, util.
main =>
   LM = {{a,b,c,d,e,f},
		 {g,x,x,x,x,x},
	     {h,x,i,x,j,k},
	     {l,x,m,n,o,x},
	     {p,x,x,x,x,q},
	     {r,x,x,s,x,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,d,g,h,i,j,l,m,o,p,r,s], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,f,h,k,m,n,p,q], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = len(LM), ZAHL = 10, QSUM = 1, FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N), MVars = array_matrix_to_list(M), MVars :: 0..9,
   Primes = primes(99), Cubes = [I*I*I : I in 1..9], Even = [0,2,4,6,8],
   % Waagrecht:
   waagrecht(M,a,ZAHL,FWD,Aw), waagrecht(M,o,ZAHL,REV,ROw), multiple(Aw, ROw),
   waagrecht(M,d,ZAHL,REV,RDw), RDw :: Cubes,
   waagrecht(M,g,ZAHL,FWD,Gw), Gw #= Bs + Es,
   waagrecht(M,h,ZAHL,FWD,Hw), Hw :: Primes,
   waagrecht(M,i,ZAHL,FWD,Iw), Iw :: Primes,
   waagrecht(M,j,ZAHL,FWD,Jw), Jw :: Primes,
   waagrecht(M,l,ZAHL,FWD,Lw), Lw :: Primes,
   waagrecht(M,m,ZAHL,FWD,Mw), Mw :: Primes,
   waagrecht(M,o,ZAHL,FWD,Ow), Ow :: Primes,
   waagrecht(M,p,ZAHL,FWD,Pw), Pw #= Gw + Es,
   waagrecht(M,r,QSUM,FWD,QRw), QRw #= RQs,
   waagrecht(M,s,QSUM,FWD,QSw), QSw #= Lw,
   waagrecht(M,s,ZAHL,REV,RSw), % s.u.
   % Senkrecht: a,b,c,d,e,f,h,k,m,n,p,q
   senkrecht(M,a,ZAHL,FWD,As), As :: Primes,
   senkrecht(M,b,ZAHL,FWD,Bs), Bs #= Cs * Cs, % Bs s.o.
   senkrecht(M,c,ZAHL,FWD,Cs), [M[1,3], M[2,3], M[3,3]] :: Even, % Cs s.u.
   senkrecht(M,d,ZAHL,REV,RDs), RDs #= Ns + Hs,
   senkrecht(M,e,ZAHL,FWD,Es), multiple(Es,Ns), % Es s.o.
   senkrecht(M,f,ZAHL,FWD,Fs), Fs :: Primes,
   senkrecht(M,h,ZAHL,FWD,Hs), Hs :: Primes, % s.o.
   senkrecht(M,k,ZAHL,FWD,Ks), Ks :: Primes,
   senkrecht(M,m,ZAHL,FWD,Ms), Ms #= Hs * Hs,
   senkrecht(M,n,ZAHL,FWD,Ns), % s.o.
   senkrecht(M,n,ZAHL,REV,RNs), RNs #= Cs + RSw,
   senkrecht(M,p,ZAHL,FWD,Ps), Ps :: Primes,
   senkrecht(M,q,ZAHL,FWD,Qs), Qs :: Primes,
   senkrecht(M,q,ZAHL,REV,RQs), % s.o.
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl.
/*
1 1 4 6 1 2 
3 8 2 9 9 9 
1 3 8 3 9 7 
1 1 1 3 8 3 
5 8 2 8 1 4 
9 4 1 5 5 1 
CPU time 0.272 seconds. 
A 114 D 612 G 382999 H 13 I 83 J 97 L 11 M 13 O 83 P 582814 R 941 S 551 korrekt*/

multiple(X,A) => % X ist Vielfaches von A
   X mod A #= 0.
   
square(X) =>
   Max = fd_max(X), 
   Tmp :: 0..Max,
   X #= Tmp*Tmp.

palindrom(L) =>
    N = len(L),
    foreach(I in 1..N//2)
        L[I] #= L[N + 1 - I]
    end.

waagrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N)
					if Len == 0, membchk(LM[R,Cn],WLetter) then Len := Cn - Col end
				end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
     		 M[Row,Col+I] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	

senkrecht(M,Letter,Base,Fwd,X) => % Base = 10/1 (1 = Quersumme), Fwd = FWD/REV (REV = Rückwert)
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N)
					if Len == 0, membchk(LM[Rn,C],SLetter) then Len := Rn - Row end
				end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: 0..9,
   		to_num(Tmp, Base, Fwd, X),
   		foreach(I in 0..Len-1)
      		M[Row+I,Col] #= Tmp[I+1]
   		end,
		M[Row,Col] #!= 0.	
   
to_num(List, Base, Fwd, Num) => % Num = Wert der Liste
        Len = length(List), 
        Num #= cond(Fwd, sum([List[I]*Base**(Len-I) : I in 1..Len]), sum([List[I]*Base**(I-1) : I in 1..Len])).