/* Zeit Logelei 2010/06
   Hinweis: Andere Kreuzzahlrätsel werden gelöst, indem man die Zeilen 8-13, 46-70 und 77-90 anpasst 
   Die Startkoordinaten und Längen der Zahlen müssen nicht angegeben werden. Sie werden in findLetter(..) aus den Buchstaben berechnet 
   Für die Längenberechnung wird mit membchk nach dem nächsten Buchstaben in der Zeile bzw. Spalte gesucht, für den eine Cons-Regel existiert*/
import cp.
import util.
findLetter(WLetter,SLetter,Dir,Letter) = Res =>
	LM = {{a,b,c,d,e,f},
	      {g,x,x,x,h,x},
	      {i,j,k,l,m,n},
	      {o,x,p,x,x,x},
	      {q,x,r,x,s,x},
	      {t,x,x,x,u,x}},
	N = len(LM),
	Row := 0, Col := 0, Len := 0,
	if Dir = waagrecht then 
		foreach(R in 1..N)
			foreach(C in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N)
					if Len == 0, membchk(LM[R,Cn],WLetter) then Len := Cn - Col end
				end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end
	else
		foreach(C in 1..N)
			foreach(R in 1..N)
				if LM[R,C] = Letter then Row := R, Col := C end
			end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N)
					if Len == 0, membchk(LM[Rn,C],SLetter) then Len := Rn - Row end
				end,
				if Len = 0 then Len := N+1-Row end
			end 
		end
	end,
	Res = (Row,Col,Len). 

main => go.

go =>
   N = 6, 
   Cons = [(waagrecht,a,10,FWD,$multiple(RFs)),  % A waagrecht = Vielfaches von Rückwert F senkrecht
   		   (waagrecht,c,10,FWD,$equals(Fs * Fs)),% C waagrecht = Quadrat von F senkrecht
   		   (waagrecht,g,10,FWD,$multiple(RBs)),  % G waagrecht = Vielfaches von Rückwert B senkrecht
   		   (waagrecht,h,10,REV,$is_prime),		 % Rückwert H waagrecht = prim
   		   (waagrecht,i,10,FWD,$equals(QAw)),	 % I waagrecht = Quersumme A waagrecht
   		   (waagrecht,k,10,FWD,$multiple(Sw)),
   		   (waagrecht,o,10,FWD,$square),
   		   (waagrecht,p,10,FWD,$equals(Es * Es)),
   		   (waagrecht,q,10,FWD,$multiple(RQs)),
   		   (waagrecht,s,10,FWD,$is_prime),
   		   (waagrecht,t,10,FWD,$equals(Qs * Qs)),
   		   (waagrecht,u,10,REV,$square),
           (senkrecht,a,10,FWD,$equals(Aw * Aw)),
   		   (senkrecht,b,10,FWD,$is_prime),
   		   (senkrecht,c,10,FWD,$equals(Rs * Rs)),
   		   (senkrecht,d,10,REV,$is_prime),
   		   (senkrecht,e, 1,FWD,$equals(Iw)),	 % Quersumme E senkrecht = I waagrecht
   		   (senkrecht,f,10,FWD,$multiple(RQs)),
   		   (senkrecht,j,10,FWD,$equals(Ds * Ds)),
   		   (senkrecht,l,10,FWD,$equals(Sw * Sw)), 
   		   (senkrecht,m,10,FWD,$multiple(Ow)),
   		   (senkrecht,n,10,FWD,$equals(Uw * Uw)),
   		   (senkrecht,q,10,FWD,$is_prime),
   		   (senkrecht,r,10,REV,$is_prime)],
   WLetter := [Letter : (Dir,Letter,Base,Fwd,Predicate) in Cons, Dir = waagrecht],
   SLetter := [Letter : (Dir,Letter,Base,Fwd,Predicate) in Cons, Dir = senkrecht],
   FWD = true, REV = false,
   M = new_array(N,N),
   MVars = array_matrix_to_list(M),
   MVars :: 0..9,
   value(WLetter,SLetter,M,senkrecht,f,10,REV,RFs), % Rückwert F senkrecht
   value(WLetter,SLetter,M,senkrecht,f,10,FWD,Fs),
   value(WLetter,SLetter,M,senkrecht,b,10,REV,RBs),
   value(WLetter,SLetter,M,waagrecht,a, 1,FWD,QAw),
   value(WLetter,SLetter,M,waagrecht,s,10,FWD,Sw), 
   value(WLetter,SLetter,M,senkrecht,e,10,FWD,Es),
   value(WLetter,SLetter,M,senkrecht,q,10,REV,RQs), 
   value(WLetter,SLetter,M,senkrecht,q,10,FWD,Qs), 
   value(WLetter,SLetter,M,waagrecht,a,10,FWD,Aw), 
   value(WLetter,SLetter,M,senkrecht,r,10,FWD,Rs), 
   value(WLetter,SLetter,M,waagrecht,i,10,FWD,Iw), 
   value(WLetter,SLetter,M,senkrecht,d,10,FWD,Ds), 
   value(WLetter,SLetter,M,waagrecht,o,10,FWD,Ow), 
   value(WLetter,SLetter,M,waagrecht,u,10,FWD,Uw), 
        
   foreach((Dir,Letter,Base,Fwd,Predicate) in Cons)
   		value(WLetter,SLetter,M,Dir,Letter,Base,Fwd,X),
   		call(Predicate,X)
   end,	 
   Vars = MVars,
   solve(Vars),
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%d ", M[I,J])
      end,
      nl
   end,
   nl.
   /* 	9 6 1 7 6 4 
		2 1 4 4 9 2 
		1 5 4 3 9 2 
		6 4 4 7 6 1 
		4 7 3 2 6 1 
		1 6 8 1 4 6 	*/

equals(A,X) =>
	A #= X.
	
multiple(A,X) =>
   X mod A #= 0.
   
is_prime(X) =>
   Max = fd_max(X),
   foreach(I in 2..Max // 2)
      I #!= X #=> X mod I #> 0
   end.

square(X) =>
   Max = fd_max(X),
   Tmp :: 0..Max,
   X #= Tmp**2.

to_num(List, Base, Num) => % Num = Wert der Liste
        Len = length(List),
        Num #= sum([List[I]*Base**(Len-I) : I in 1..Len]).

to_num_rev(List, Base, Num) => % Num = Rückwert der Liste
        Len = length(List),
        Num #= sum([List[I]*Base**(I-1) : I in 1..Len]).

across(Matrix, Across, Base, Fwd, Len, Row, Col) =>
   Tmp = new_list(Len),
   Tmp :: 0..9999,
   if Fwd then to_num(Tmp, Base, Across) else to_num_rev(Tmp, Base, Across) end,
   foreach(I in 0..Len-1)
      Matrix[Row,Col+I] #= Tmp[I+1]
   end.

down(Matrix, Down, Base, Fwd, Len, Row, Col) =>
   Tmp = new_list(Len),
   Tmp :: 0..9999,
   if Fwd then to_num(Tmp, Base, Down) else to_num_rev(Tmp, Base, Down) end,
   foreach(I in 0..Len-1)
      Matrix[Row+I,Col] #= Tmp[I+1]
   end.

value(WLetter,SLetter,M,Dir,Letter,Base,Fwd,X) => % Dir = waagrecht/senkrecht, Fwd = FWD/REV
	(Row,Col,Len) = findLetter(WLetter,SLetter,Dir,Letter), % writeln([Dir,Letter,Row,Col,Len]),
	if Dir = waagrecht then 
		across(M, X, Base, Fwd, Len, Row, Col)
	else
		down(M, X, Base, Fwd, Len, Row, Col)
	end,
	M[Row,Col] #!= 0.	
