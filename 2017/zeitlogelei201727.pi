/* Zeit Logelei 2017/27
http://www.zeit.de/2017/27/spiele-logelei-27 */
import util.
import sat. 

main => go.

go =>  % 7 x 7
   N = 7,
   % Um Schiffe gleicher Länge zu unterscheiden, nehmen wir 10er für U-Boote, 20er für Zerstörer usw.
   Colors = [0, 10,11,12,13, 20,21,22, 30,31, 40], % 0 = Wasser
   M = new_array(N,N), M :: Colors, M[3,3] #= 0, M[7,7] #= 0, Mvars = array_matrix_to_list(M),
   % Eine Farbe F gibt es F // 10 mal:
   foreach(F in Colors, F > 0)
   		F // 10 #= sum([(M[Z,S]#=F): Z in 1..N, S in 1..N])
   end,   
   SumS = {5,1,3,2,4,1,4}, foreach(S in 1..N) SumS[S] #= sum([(M[Z,S] #> 0) : Z in 1..N]) end,
   SumZ = {5,1,4,1,3,1,5}, foreach(Z in 1..N) SumZ[Z] #= sum([(M[Z,S] #> 0) : S in 1..N]) end,
   % Schiffe dürfen nicht orthogonal benachbart sein:
   foreach(Z in 1..N, S in 1..N-1) (M[Z,S] #> 0 #/\ M[Z,S+1] #> 0) #=> M[Z,S] #= M[Z,S+1]   end,   
   foreach(Z in 1..N-1, S in 1..N) (M[Z,S] #> 0 #/\ M[Z+1,S] #> 0) #=> M[Z,S] #= M[Z+1,S]   end,   
   % Schiffe dürfen nicht diagonal benachbart sein:
   foreach(Z in 1..N-1, S in 1..N-1)
		   M[Z,S] #> 0 #=> M[Z+1,S+1] #= 0, M[Z+1,S+1] #> 0 #=> M[Z,S] #= 0,
		   M[Z,S+1] #> 0 #=> M[Z+1,S] #= 0, M[Z+1,S] #> 0 #=> M[Z,S+1] #= 0
   end,  
   % Alle Felder zwischen zwei Feldern gleicher Farbe haben ebenfalls diese Farbe:
   foreach(Z1 in 1..N-2, S in 1..N, Z2 in Z1+1..N-1, Z3 in Z2+1..N)
		   (M[Z1,S] #> 0 #/\ M[Z1,S] #= M[Z3,S]) #=> M[Z1,S] #= M[Z2,S]
   end,
   foreach(Z in 1..N, S1 in 1..N-2, S2 in S1+1..N-1, S3 in S2+1..N)
		   (M[Z,S1] #> 0 #/\ M[Z,S1] #= M[Z,S3]) #=> M[Z,S1] #= M[Z,S2]
   end,
   /*foreach(I in 1..N-1, J in I+1..N*N, I // N < J // N)
   		(Mvars[I] // 10) #= (Mvars[J] // 10) #=> Mvars[I] #=< Mvars[J]
   end,
   solve_all(M) = Sols, 
   foreach(Sol in Sols)
   	println(Sol)
   end. % 288 = 4! * 3! * 2!
   */
   solve(M), print("   "),
   foreach(S in 1..N) printf("%d ",SumS[S]) end, nl, println("   - - - - - - -"),
   foreach(Z in 1..N) 
   	  printf("%d: ", SumZ[Z]),
      foreach(S in 1..N) 
		   if M[Z,S]=0 then print(". ") else printf("%d ",M[Z,S] // 10) end
	  end, nl
   end.
   
   fac(1) = 1.
   fac(N) = N * fac(N-1).
/* 
   5 1 3 2 4 1 4 
   - - - - - - -
5: 3 3 3 . 1 . 3 
1: . . . . . . 3 
4: 2 . . 2 2 . 3 
1: 2 . . . . . . 
3: . . 1 . 1 . 1 
1: 2 . . . . . . 
5: 2 . 4 4 4 4 . 

CPU time 1.399 seconds. korrekt! */   
