/* Zeit Logelei 2017/13
In Buronien gibt es Leute mit langen Haaren, Leute mit kurzen Haaren und Leute mit Glatzen. 
Professor Knusi hat herausgefunden, dass die Mitglieder einer dieser drei Gruppen immer lügen, 
bei einer anderen Gruppe sagen alle Mitglieder die Wahrheit, und die Mitglieder der dritten Gruppe 
sagen mal die Wahrheit, und mal lügen sie.
Welche Gruppe welche Haartracht hat, weiß Knusi noch nicht. Er unterhält sich mit zwei Buroniern darüber. */
import cp.
main =>
   B = [B1, B2, B3], 
   Luegt = 0, MalSo = 1, Wahr = 2,
   B :: [Luegt, MalSo, Wahr],
   sagt(B1, B2, Luegt), % Einer meint: "Der lügt immer", und zeigt dabei auf den anderen
   sagt(B2, B1, MalSo), % Da sagt der andere: "Der sagt mal die Wahrheit, und mal lügt er!", und zeigt auf den Ersten:
   sagt(B3, B1, Luegt), % Da kommt ein dritter Buronier des Weges und sagt, wobei er auf den Ersten deutet: "Glauben Sie dem nichts, der lügt immer!"
   % Nun freut sich Knusi: "Dann weiß ich es!" -> Wie können wir erreichen, dass es genau eine Lösung gibt?

   % all_different(B), % 1. Versuch -> [0,1,2], [1,2,0], [2,0,1] -> nicht eindeutig!
   % Wenn genau zwei die Haare gleich haben, kann Knusi trotzdem auf die dritte, nicht vertretene Gruppe schließen
   nvalue(2,B),

   solve_all(B) = Sols,
   show(Sols,1,2), show(Sols,1,3), show(Sols,2,3).
/*
B[1]=B[2]: [1,1,0]
B[1]=B[3]: [1,2,1]
B[2]=B[3]: [0,1,1][2,0,0]

Knusi sieht wie B1, B2 und B3 die Haare haben:
 
Falls B1 die Haare hat wie B2, B3 aber nicht: [1,1,0] 
-> Erster und Zweiter mal so, mal so; Dritter lügt immer; die nicht vertretene Gruppe sagt die Wahrheit (=2)
Die ZEIT schließt aus der Lüge des Dritten: "Der Erste sagt immer die Wahrheit." Dann fällt diese Lösung aus.

Falls B1 die Haare hat wie B3, B2 aber nicht: [1,2,1]
-> Erster und Dritter mal so, mal so; Zweiter sagt die Wahrheit; die nicht vertretene Gruppe lügt immer (=0)

In den anderen Fällen ist die Lösung nicht eindeutig. 
*/
sagt(X, Y, Val) =>
	Luegt = 0, Wahr = 2,
	X #= Wahr  #=> Y #= Val,
	X #= Luegt #=> Y #!= Val.
	
show(Bs, X, Y) =>
	printf("B[%d]=B[%d]: ", X, Y),
	foreach(B in Bs)
		if B[X] = B[Y] then print(B) end
	end, nl.
