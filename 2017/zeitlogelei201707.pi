/* Zeit Logelei 2017/07
Constraint connected: Jede Farbe hat einen Ankerpunkt mit Distanz 0.
Von dort lassen sich alle Punkte dieser Farbe erreichen. Je Schritt erhöht sich die Distanz um 1.
Farbe 1 -> Dist[1,R,C] (wird als "1er" ausgedruckt)
Farbe 2 -> Dist[2,R,C] (wird als "2er" ausgedruckt) */
import util.
import sat. % cp ist zu langsam
main => go.

go =>  % 8 x 8
    M   = {{_,_,_,_,_,_,_,1},	
   		   {_,1,1,_,_,_,_,_},	
   		   {_,_,_,_,_,_,2,_},	
   		   {_,_,_,_,_,_,1,_},   % (4,7) ist 1er Anker
   		   {_,2,1,_,_,_,_,_},	% (5,2) ist 2er Anker
   		   {_,_,_,_,_,_,1,_}, 
   		   {_,_,_,_,_,_,1,_},	
   		   {_,_,_,_,_,_,_,_}},
   Anker = {(4,7),(5,2)},
   MVars = array_matrix_to_list(M),
   MVars :: [1,2], 
   N = 8, Dist = new_array(2,N,N), 
   MaxDist = 24, % N * N // 2, % sollte wohl reichen (in diesem Fall reicht sogar schon 23)
   DistVars = vars(Dist), DistVars :: 0..MaxDist, 
   % Keine 2x2 Felder mit nur einer Farbe:
   foreach(R in 1..N-1, C in 1..N-1)
	Cnt #= M[R,C] + M[R+1,C] + M[R,C+1] + M[R+1,C+1],
	Cnt #!= 4, Cnt #!= 8		% alle 1 ergibt 4, alle 2 ergibt 8!
   end,
   foreach(Color in 1..2)   
   	  Dist[Color,Anker[Color,1],Anker[Color,2]] #= 0, % Ankerpunkt möglichst in der Mitte der Kette
      foreach(R in 1..N, C in 1..N, (R,C) != Anker[Color])
   	  	 M[R,C] #= Color   #=> Dist[Color,R,C] #= 1 + min([ Dist[Color,R1,C1] : (R1,C1) in [(R-1,C),(R,C-1),(R,C+1),(R+1,C)], R1 >= 1, R1 =< N, C1 >= 1, C1 =< N ]), 
   		 M[R,C] #= 3-Color #=> Dist[Color,R,C] #= MaxDist 
      end
   end,
   solve(MVars ++ DistVars),
   foreach(R in 1..N) 
      foreach(C in 1..N) 
		   printf("%3d",M[R,C])
	  end, nl
   end,
   foreach(Color in 1..2)
   	printf("%der:%n",Color),
   	foreach(R in 1..N) 
      foreach(C in 1..N) 
		   if M[R,C]=Color then printf("%3d",Dist[Color,R,C]) else print("  -") end
	  end, nl
   	end
   end.
/*
  2  2  2  1  1  1  1  1
  2  1  1  1  2  2  1  2
  2  2  2  1  1  2  2  2
  2  1  1  1  2  2  1  2
  2  2  1  2  2  1  1  2
  2  1  1  1  2  2  1  2
  2  1  2  1  1  1  1  2
  2  2  2  2  2  2  2  2
1er:
  -  -  - 14 15 16 17 18
  - 15 14 13  -  - 18  -
  -  -  - 12 13  -  -  -
  - 11 10 11  -  -  0  -
  -  -  9  -  -  2  1  -
  -  9  8  7  -  -  2  -
  - 10  -  6  5  4  3  -
  -  -  -  -  -  -  -  -
2er:
  5  6  7  -  -  -  -  -
  4  -  -  - 20 19  - 17
  3  4  5  -  - 18 17 16
  2  -  -  - 20 19  - 15
  1  0  - 22 21  -  - 14
  2  -  -  - 22 23  - 13
  3  -  7  -  -  -  - 12
  4  5  6  7  8  9 10 11

CPU time 21.628 seconds.
*/   
