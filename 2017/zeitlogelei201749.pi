/* Zeit Logelei 2017/49 A 
Bei + ist die Nummer für den waagrechten Weg eingezeichnet, deas + wird bei senkrechter Querung übersprungen 
*/
import sat, util. 
 
main =>	
    C = {{0,0, 0,0,0,0, 0,0,0},
         {0,0, 0,0,0,2,-1,0,0}, % -1 = + (Kreuzfeld)
         {0,0, 0,0,0,0, 0,0,0},
         {0,0, 4,0,0,0, 3,0,0},
         {0,0,-1,0,0,9, 0,0,0},
         {0,7,-1,0,0,0, 1,0,0},
         {0,0, 0,0,8,0, 0,0,0},
         {0,0, 5,0,0,0, 0,6,0},
         {0,0, 0,0,0,0, 0,0,0}}, 	
    N = len(C), Max = N * N,
	% Nummeriere die Felder entsprechend dem Weg von 1 bis 81 durch: 
	M = new_array(N,N), Mvars = vars(M), Mvars :: 1..Max, all_different(Mvars),
    Ord = new_array(9), Ord :: 1..Max, increasing_strict(Ord),  % Zahlenfelder werden aufsteigend durchlaufen
    foreach(Z in 1..N, S in 1..N, C[Z,S]=(-1))                  % Kreuzfelder
        abs(M[Z,S-1] - M[Z,S+1]) #= 2                           % horizontal hat das Kreuzfeld auch eine lfd. Nr.
    end,
    abs(M[1,7] - M[3,7]) #= 1, abs(M[4,3] - M[7,3]) #= 1,       % vertikal werden die Kreuzfelder übersprungen
    % Zahlenfelder - hier wird wird nicht abgebogen:
    % Verbesserung: Nicht abbiegen mit != codieren -> dann braucht man keine Ausnahmen!
    foreach(Z in 1..N, S in 1..N, C[Z,S]>0, C[Z,S]!=4, C[Z,S]!=9) % Ausnahmen wg. Kreuzfeld vertikal und 81->1
        abs(M[Z,S-1] - M[Z,S+1]) #= 2 #\/  abs(M[Z-1,S] - M[Z+1,S]) #= 2
    end,
    foreach(Z in 1..N, S in 1..N, C[Z,S]>0)
        Ord[C[Z,S]] #= M[Z,S] % merke dir die Ordnungsnummer
    end,
    % Jedes Feld X außer dem letzten hat einen orthogonalen Nachbarn X+1, das letzte hat als Nachbarn 1
    % .. mit zwei Ausnahmen beim Sprung über Kreuzfelder von 1|7 und 4|3
    foreach(Z in 1..N, S in 1..N, {Z,S}!={1,7}, {Z,S}!={4,3})
        M[Z,S] #< Max #=> sum([(M[Z1,S1] #= M[Z,S] + 1) : Z1 in Z-1..Z+1, S1 in S-1..S+1, (Z1=Z || S1=S), 1=<Z1, Z1=<N, 1=<S1, S1=<N]) #= 1,
        M[Z,S] #= Max #=> sum([(M[Z1,S1] #= 1)          : Z1 in Z-1..Z+1, S1 in S-1..S+1, (Z1=Z || S1=S), 1=<Z1, Z1=<N, 1=<S1, S1=<N]) #= 1
    end,
    solve(Mvars),
    foreach(Z in 1..N)
    	print("|"), 
    	foreach(S in 1..N) 
            printf("%2d|", M[Z,S])
        end, nl
    end.
/*
|40|41|44|45|19|20|21|14|13|
|39|42|43|46|18|17|16|15|12|
|38|37|48|47|28|27|22|23|11|
|35|36|49|30|29|26|25|24|10|
|34|33|32|31|80|81| 1| 8| 9|
|71|72|73|74|79|78| 2| 7| 6|
|70|51|50|75|76|77| 3| 4| 5|
|69|52|53|54|55|56|57|58|59|
|68|67|66|65|64|63|62|61|60|

CPU time 1521.16 seconds. korrekt laut ZEIT! */   