/* Zeit Logelei 201120 Kreuzzahl Corssfigure mit römischen Zahlen */
import sat, util.
valid(Li) => % Li ist eine valide römische Zahl
        I=1, V=5, X=10, L=50, C=100, D=500, M=1000,
        Li :: [I, V, X, L, C, D, M],
        N = len(Li),
        vor_nur(Li,V,I), vor_nur(Li,X,I), % vor V oder X nur I 
        vor_nur(Li,L,X), vor_nur(Li,C,X), % vor L oder C nur X
        vor_nur(Li,D,C), vor_nur(Li,M,C), % vor D oder M nur C
        % Keine zwei V oder L oder D hintereinander:
        foreach(J in 1..N-1) Li[J] #= Li[J+1] #=> Li[J] notin [V,L,D] end. %,
        % Es gibt keine zwei Subtraktionsziffern hintereinander:
        foreach(J in 2..N-1) Li[J] #< Li[J+1] #=> Li[J-1] #>= Li[J+1] end.
vor_nur(Li, A, B) => % vor A darf nur B stehen
        N = len(Li),
        foreach(J in 1..N-1) (Li[J+1] #= A #/\ Li[J] #< A) #=> Li[J] #= B end.
to_rom(List, Fwd, Num) => % Num = Wert der Liste
        N = length(List), Num #> 0,
        Li = cond(Fwd=1, List, reverse(List)),
        % Ist eine Ziffer kleiner als die nächste, wird sie subtrahiert:
        Num #= sum([Li[J] * ((Li[J]#>=Li[J+1]) - (Li[J]#<Li[J+1])) : J in 1..N-1]) + Li[N].
main ?=>
   LM = {{a,b,c,d,e},
         {f,x,g,x,x},
	 {h,i,x,j,x},
	 {k,x,x,x,l},
         {m,x,n,x,x}}, get_global_map().put(lm,LM),       
   WLetter := [a,d,f,g,h,k,m,n], get_global_map().put(wl,WLetter), % alle Buchstaben mit waagrechter Bedingung
   SLetter := [a,b,c,d,e,i,j,k,l], get_global_map().put(sl,SLetter), % alle Buchstaben mit senkrechter Bedingung
   N = len(LM), FWD = 1, REV = 0, % cond arbeitet nicht mit Bool!
   M = new_array(N,N),
   PR = primes(9999),
   SQ = [I*I : I in 1..99],
   % Waagrecht:
   waagrecht(M,a,LAW), palindrom(LAW), 
   waagrecht(M,d,FWD,DW), DW mod ES #= 0, % Vielfaches von ES
   waagrecht(M,f,FWD,FW), FW mod JS #= 0, % Vielfaches von JS
   waagrecht(M,g,FWD,GW), % s.u.
   waagrecht(M,g,LGW), palindrom(LGW),
   waagrecht(M,k,FWD,KW), KW #= CS - HW,
   waagrecht(M,h,FWD,HW), HW #= DW + GW, 
   waagrecht(M,m,FWD,MW), MW :: PR, 
   waagrecht(M,n,FWD,NW), NW :: SQ,   
   % Senkrecht:
   senkrecht(M,a,FWD,AS), AS mod JS #= 0, % Vielfaches von JS
   senkrecht(M,b,FWD,BS), % Quadrat einer dreistelligen Zahl:
   WBS * WBS #= BS, LWBS = [_,_,_], valid(LWBS), to_rom(LWBS, FWD, WBS),
   senkrecht(M,c,FWD,CS), CS mod RLS #= 0, % Vielfaches des Rückwerts von L-senkrecht
   senkrecht(M,d,FWD,DS), DS mod MW #= 0, % Vielfaches von MW
   senkrecht(M,e,FWD,ES), FW mod ES #= 0, % FW ist eine Vielfaches; s.o.
   senkrecht(M,i,FWD,IS), IS :: PR,
   senkrecht(M,j,FWD,JS), JS :: SQ, % s.o.
   senkrecht(M,k,FWD,KS), KS :: PR,
   senkrecht(M,l,REV,RLS), % s.o.
   senkrecht(M,l,FWD,LS), LS :: PR,
   solve(M),
   % Umrechnung der Werte 1, 5, 10, 50, 100, 500, 1000 in die entsprechende Römische Ziffer:
   %       1,      4,    6,      9,  10,     13,   15]  = 1+round(2*log(Wert))
   Rom = ['I',_,_,'V',_,'X',_,_,'L','C',_,_,'D',_,'M'],
   foreach(I in 1..N) 
      foreach(J in 1..N) 
           printf("%c|", Rom[1+round(2*log(M[I,J]))])
      end,
      nl
   end,
   nl, fail.
/*
M|C|M|D|C|
C|M|C|X|C|
D|C|C|X|C|
C|D|L|X|X|
I|I|X|V|I|
CPU time 17 seconds, no more solutions, korrekt */
waagrecht(M,Letter,Fwd,X) => % Fwd = FWD/REV (REV = Rückwert)
        waagrecht(M,Letter,Tmp), to_rom(Tmp, Fwd, X).

waagrecht(M,Letter,Tmp) =>
		LM = get_global_map().get(lm), WLetter = get_global_map().get(wl),
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(R in 1..N)
			foreach(C in 1..N, LM[R,C] = Letter) Row := R, Col := C end,
			if Len == 0, Row  > 0 then 
				foreach(Cn in Col+1..N, Len == 0, membchk(LM[R,Cn],WLetter)) Len := Cn - Col end,
				if Len = 0 then Len := N+1-Col end 
		    end 
		end,
	    Tmp = new_list(Len), Tmp :: [1,5,10,50,100,500,1000],
   		foreach(I in 0..Len-1) M[Row,Col+I] #= Tmp[I+1] end,
        valid(Tmp).

senkrecht(M,Letter,Fwd,X) => % Fwd = FWD/REV (REV = Rückwert)
        senkrecht(M,Letter,Tmp), to_rom(Tmp, Fwd, X).

senkrecht(M,Letter,Tmp) =>
		LM = get_global_map().get(lm), SLetter = get_global_map().get(sl),        
		N = len(LM), Row := 0, Col := 0, Len := 0,
		foreach(C in 1..N)
			foreach(R in 1..N, LM[R,C] = Letter) Row := R, Col := C end,
			if Len == 0, Col > 0 then 
				foreach(Rn in Row+1..N, Len == 0, membchk(LM[Rn,C],SLetter)) Len := Rn - Row end,
				if Len = 0 then Len := N+1-Row end
			end 
		end,
   		Tmp = new_list(Len), Tmp :: [1,5,10,50,100,500,1000],
   		foreach(I in 0..Len-1) M[Row+I,Col] #= Tmp[I+1] end,
        valid(Tmp).

palindrom(L) =>
    N = len(L),
    foreach(I in 1..N//2) L[I] #= L[N + 1 - I] end.