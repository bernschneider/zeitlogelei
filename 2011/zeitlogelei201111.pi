/* Zeit Logelei 2011/11 (nach Janko Zahlenlabyritnh, aber mit Korrekturen: Zeile 22f)
https://www.zeit.de/2011/11/Spiele-Logelei-11 */
import sat, util.
main =>
	Gr=1, Ge=2, Bl=3, Max = 3, % Grün, Gelb, Blau
    M = {{ _, _, _,Gr, _, _, _},
         { _, _, _, _, _, _, _},
         { _,Bl, _, _, _, _, _},
         { _, _, _, _, _,Gr, _},
         { _, _, _, _, _, _, _},
         { _, _, _, _,Ge, _, _},
         { _,Ge, _, _, _, _,Bl}}, N = len(M),  M :: 0..Max,
    foreach(Row in M.rows())    good(Max, Row) end,
    foreach(Col in M.columns()) good(Max, Col) end,
    Zs = new_array(N*N), Ss = new_array(N*N), 
    Zs[1] = 3, Ss[1] = 1, % Kreis (Startpunkt)
    Weg = "HHRTTRRTRTLLHLLTRTLTRRHRTRHRTRHHLHRHHHLTTLHHLLTR",  % Weg durch das Labyrinth
    Mem = new_array(N,N), Mem :: 1..Max, % Memory: was wer die letze Zahl?
    foreach(I in 1..N*N-1)
    	Zs[I+1] = cond(Weg[I]='T', Zs[I] + 1, cond(Weg[I]='H', Zs[I] - 1, Zs[I])),
    	Ss[I+1] = cond(Weg[I]='R', Ss[I] + 1, cond(Weg[I]='L', Ss[I] - 1, Ss[I])),
    	M[Zs[I+1],Ss[I+1]] #= 0 #=> Mem[Zs[I+1], Ss[I+1]] #= Mem[Zs[I], Ss[I]], % Mem bleibt gleich
    	M[Zs[I+1],Ss[I+1]] #> 0 #=> (Mem[Zs[I+1], Ss[I+1]] - Mem[Zs[I], Ss[I]]) mod Max #=< 1 % Mem steigt um 1 
    end, % println(Zs), println(Ss),
    foreach(Z in 1..N, S in 1..N)
    	M[Z,S] #= 0 #\/ M[Z,S] #= Mem[Z,S]
    end,
	MVars = array_matrix_to_list(M) ++ array_matrix_to_list(Mem), 
    solve(MVars), F = ["  ","Gr","Ge","Bl"],
    foreach(Z in 1..N, S in 1..N)
		printf("%s|", F[1+M[Z,S]]),
    	if S = N then nl end
    end.
/*
Ge|  |  |Gr|Bl|  |  |
Gr|  |Ge|Bl|  |  |  |
  |Bl|Gr|  |  |Ge|  |
Bl|  |  |Ge|  |Gr|  |
  |Gr|  |  |  |Bl|Ge|
  |  |Bl|  |Ge|  |Gr|
  |Ge|  |  |Gr|  |Bl|
CPU time 0.19 seconds */    
good(Max, L) =>
	sum(L) #= Max * (Max + 1) // 2, % alle Zahlen 1..Max müsssen vorkommen
	all_different_except_0(L).