/* Zeit Logelei 2011/25 Dominos erkennen (nach Hakan Kjellerstrand)
https://www.zeit.de/2011/25/Spiele-Logelei-25 */
import sat.
main ?=> 
    Config = {{4,9,3,1,2,8,9,7,2,2,7},
              {5,0,0,7,1,8,8,4,1,3,8},
              {6,6,6,9,8,8,6,7,0,3,2},
              {1,3,6,4,1,5,9,5,3,6,7},
              {9,7,4,0,1,8,0,7,4,8,2},
              {9,5,1,5,0,3,3,3,5,0,6},
              {8,2,1,4,3,3,9,1,9,2,9},
              {3,0,2,0,7,2,1,9,4,5,4},
              {2,1,4,4,6,6,5,6,7,5,6},
              {0,7,7,8,8,0,2,4,5,9,5}},
    NZ = len(Config), NS = len(Config[1]), A = new_array(NZ,NS),
    D = [X : I in 0..9, J in I..9, X = I*10+J],  % D=[0,1,9,11,..,19,...,89,99]
    Vars = [A[I,J] : I in 1..NZ, J in 1..NS], Vars :: D,
    foreach(I in 1..NZ, J in 1..NS)
	    Config[I,J] #= A[I,J] div 10 #\/ Config[I,J] #= A[I,J] mod 10,
        % % Exactly one of A[I,J]'s neighbors is the same as A[I,J]:
	    sum([(A[I1,J1] #= A[I,J]) : (I1,J1) in [(I-1,J),(I,J-1),(I,J+1),(I+1,J)],
                                    I1>0, I1=<NZ, J1>0, J1=<NS]) #= 1
    end,
    Values = [$X-2 : X in D], global_cardinality(Vars,Values),
    solve(Vars),
    foreach(I in 1..NZ)
       foreach(J in 1..NS) printf("%2d ", A[I,J]) end, nl
    end, fail.
/*
45 39 39 17 28 28 79 79 22 22 78 
45  0  0 17 18 18 48 48 13 13 78 
16 66 66 89 89 68 68  7  7 36 27 
16 37 46 46 11 58  9 57 34 36 27 
99 37 14  5 11 58  9 57 34  8 26 
99 25 14  5  3 33 33 35 35  8 26 
38 25 12  4  3 23 19 19 29 29 49 
38  1 12  4 67 23 15 69 47 55 49 
 2  1 44 44 67  6 15 69 47 55 56 
 2 77 77 88 88  6 24 24 59 59 56 
CPU time 2.36 seconds, no more solutions, korrekt */