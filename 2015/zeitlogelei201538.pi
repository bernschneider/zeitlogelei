/* Zeit Loegelei 2015/38 Alphametik: Schriftliche Multiplikation  */
import cp, util.

main =>
    mult(["VIER", "FUENF", "KVRVKR", "FRNVRL", "RKFEKT", "LKRNE", "KLEEERNTE"]),
    add(["KLEE", "KLEE", "GLUCK"]).
/*
4962 * 35603
-----------
142412
 320427
  213618
    71206
-----------
176662086 

  6288
  6288
------
 12576 CPU time 1.467 seconds korrekt */
add(L) => % das letzte Element von L ist die Summe der vorherigen Elemente
   Letter = keys(new_set(flatten(L))), % verwendete Buchstaben
   Digit = new_list(len(Letter)), Digit :: 0..9, % eine Ziffer je Buchstabe
   all_different(Digit),
   Zeilen = len(L) - 1, % Anzahl der Summanden, im Beispiel = 2
   Num = new_array(len(L)), % numerische Repräsentation der Elemente von L
   foreach(I in 1..len(L))
       S = [Digit[find_first_of(Letter, C)] : C in L[I]], % Convert Letter C -> Digit
       to_num(S, Num[I]), S[1] #!= 0
   end,
   sum([Num[I] : I in 1.. Zeilen]) #= Num[len(L)],
   solve(Digit ++ Num),
   foreach(I in 1..Zeilen) printf("%6d%n", Num[I]) end,
   printf("------%n"),
   printf("%6d%n%n", Num[len(L)]).

mult(L) =>
   Letter = keys(new_set(flatten(L))), % verwendete Buchstaben
   Digit = new_list(len(Letter)), Digit :: 0..9, % eine Ziffer je Buchstabe
   all_different(Digit),
   Zeilen = len(L[1]), % Anzahl der Teilrechnungen, im Beispiel = 4
   LenZeile = max([len(L[2+I]) : I in 1..Zeilen]), % maximale Länge der Zeilen, im Beispiel = 5
   Num = new_array(len(L)), % numerische Repräsentation der Elemente von L
   foreach(I in 1..len(L))
       S = [Digit[find_first_of(Letter, C)] : C in L[I]], % Convert Letter C -> Digit
       to_num(S, Num[I]), S[1] #!= 0
   end,
   Num[1] * Num[2] #= Num[len(L)], % Hauptgleichung (im 1. Beispiel MICH * KANN = FACHMANN)
   L1 = L[1],
   foreach(I in 1..Zeilen) % zeilenweise Teilrechnung:
       Digit[find_first_of(Letter, L1[I])] * Num[2] #= Num[2+I]
   end,
   solve(Digit ++ Num),
   printf("%d * %d%n", Num[1], Num[2]),
   printf("-----------%n"),
   foreach(I in 1..Zeilen)
       foreach(_ in 2..I+LenZeile-len(L[2+I])) print(' ') end, % Indent
       println(Num[2+I])
   end,
   printf("-----------%n"),
   printf("%d%n%n", Num[len(L)]).

to_num(List, Num) => 
        Len = length(List),
        Num #= sum([List[I]*10**(Len-I) : I in 1..Len]).