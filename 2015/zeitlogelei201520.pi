/* Zeit Logelei 2015/20 */
import util, cp.
main =>
   N = 7, Max = 6,   % 7 Zeilen x 7 Spalten, Ziffern von 0..6
   SigZ = [ [4,11,1], [2,3,10], [10,6], [1,4,8], [6,15], [11,6], [3,12] ], % Zeilensignatur
   SigS = [ [6,14], [6,6], [13,2], [3,10,2], [6,10], [6,10], [1,18] ],     % Spaltensignatur
   Board = new_array(N+1, N+1),
   Boardvars = array_matrix_to_list(Board),
   Boardvars :: 0..Max,  
   foreach(Row in rows(Board))
		all_different_except_0(Row)
   end,
   foreach(Col in columns(Board))
		all_different_except_0(Col)
   end,
   foreach(Z in 1..N)
   		signature(N, Max, L, SigZ[Z]),   % die Zeilensignatur stimmt!
   		L #= [Board[Z,S] : S in 1..N+1]
   end,
   foreach(S in 1..N)
   		signature(N, Max, L, SigS[S]),  % die Spaltensignatur stimmt!
   		L #= [Board[Z,S] : Z in 1..N+1]
   end,
   solve([ff,down], Boardvars),
   print_board(Board).
   /*  4 0 6 3 2 0 1
		 2 0 3 0 4 6 0
		 0 5 4 1 0 0 6
		 0 1 0 4 0 3 5
		 6 0 2 5 3 1 4
		 5 6 0 0 1 2 3
 		 3 0 0 2 6 4 0    28 Sekunden korrekt:
 	Zeilenweise: 4#632#1, 2#3#46#, #541##6, #1#4#35, 6#25314, 56##123, 3##264# */

signature(N, Max, L, Sig) =>     % berechnet L aus Sig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig),
    Idx = new_list(Len+1), Idx :: 0..N+1,  % Indices der End-0er (N+1 hei√üt "Rand")
	Idx[1] #= 0,
	foreach(J in 1..Len)
    	I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1,
    	element(I1,L,0),        % I1 zeigt auf die 0
    	sum([L[I]*(I0 #< I)*(I #< I1) : I in 1..N]) #= Sig[J]  % ist die jeweilige Summe in der Signatur
    end,
    Imax #= Idx[Len+1],
    foreach(I in 1..N)
    	(I #< Imax) #\/ (L[I] #= 0)
    end.
    
print_board(Board) =>
   N = 7,
   foreach(I in 1..N)
      foreach(J in 1..N)
         printf(" %1d", Board[I,J])
      end,
      nl
   end,
   nl.

