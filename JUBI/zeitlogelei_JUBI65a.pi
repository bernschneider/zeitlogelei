/* Zeit Logelei JUBI p.65 */
import cp, util.

go =>
   N = 8, Max = 7,   % 8 Zeilen x 8 Spalten, Ziffern von 0..7
   SigZ = [ [9,17], [10,8], [5,4,17], [7,5,11], [17,7,3], [15,13], [4,9,9], [16] ], % Zeilensignatur
   SigS = [ [3,25], [8,16], [20,3], [1,3,16], [1,3,5,6], [27], [15,11], [7,16] ],     % Spaltensignatur
   Board = new_array(N+1,N+1), Board[N+1,N+1] #= 0,	% End-0er angefügt für die Blockbildung
   foreach(I in 1..N) Board[I,N+1] #= 0, Board[N+1,I] #= 0 end,  
   Boardvars = array_matrix_to_list(Board), Boardvars :: 0..Max,  
   foreach(Row in rows(Board)) all_different_except_0(Row) end,
   foreach(Col in columns(Board)) all_different_except_0(Col) end,
   foreach(Z in 1..N)   signature(N, Max, L, SigZ[Z]), L #= [Board[Z,S] : S in 1..N+1] end,
   foreach(S in 1..N) signature(N, Max, L, SigS[S]), L #= [Board[Z,S] : Z in 1..N+1] end,
   solve([ff,down], Boardvars), print_board(N, Board). % [ff,down], 
   % solve_all([ff,down], Boardvars) = Sols, print(numbersols = len(Sols)).
/*	
 3 6 0 0 1 4 5 7
 0 2 7 1 0 5 3 0
 5 0 4 0 3 7 6 1
 7 0 2 3 0 6 1 4
 4 7 6 0 5 2 0 3
 2 5 1 7 0 3 4 6
 1 3 0 5 4 0 7 2
 6 1 3 4 2 0 0 0

CPU time 19.596 seconds.  */

signature(N, Max, L, Sig) =>     % berechnet L aus Sig! Kein solve(Idx) nötig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig), Idx = new_list(Len+1), Idx :: 0..N+1,       % Indices der End-0er
	foreach(J in 1..Len)
    	I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1, I1 #> 1,
    	element(I1,L,0),        								% I1 zeigt auf eine 0
    	sum([ L[I] * (I0 #< I) * (I #< I1) : I in 1..N]) #= Sig[J]  % berechne die Teilsumme S
    end,
    % Vor dem ersten Index stehen nur 0er:
    foreach(I in 1..N) (Idx[1] #< I) #\/ (L[I] #= 0) end.
    % 0er hinter Nicht-0ern müssen ein Index sein (dürfen nicht sonstwo stehen): > 1 5 >0 0 0 3 4 >0
    % foreach(I in 2..N+1) (L[I] #= 0  #/\ L[I-1] #> 0) #=> sum([(Idx[J] #= I) : J in 1..Len+1]) #> 0 end.
    
print_board(N, Board) =>
   foreach(I in 1..N, J in 1..N)
      printf(" %1d", Board[I,J]),
      if J = N then nl end
   end.