/*
Zeit Logelei JUBI p. 64
*/

import util.
import cp.

main => go.

go =>
   W = new_array(9,8),
   S = new_array(8,9),
   MVars = array_matrix_to_list(W) ++ array_matrix_to_list(S),
   MVars :: [0,1], 
   Cnt = {{ 2, 2,-1,-2, 2,-1, 3,-1},
		  {-1,-1,-1,-1,-1,-1,-1,-1},
		  { 2, 1, 1, 3,-1, 1,-1,-1},
		  {-1, 2, 2, 3,-1, 1, 0, 2},
		  {-1,-1,-1,-1,-1,-1,-1,-1},
		  { 1,-1, 1, 1,-1, 2, 2, 2},
		  { 1, 0,-1, 1,-1,-1, 1,-1},
		  {-1,-1, 1,-1,-1,-1,-1,-1}},
   foreach(R in 1..8, C in 1..8, Cnt[R,C]>=0)
	Cnt[R,C] #= W[R,C] + W[R+1,C] + S[R,C] + S[R,C+1]
   end,
   % An jeder Kreuzung treffen sich 0 oder 2 Linien:
   foreach(R in 1..9, C in 1..9)
	Xcnt #= sum([W[R,C1] : C1 in [C-1,C], C1>0, C1=<8])
	     + sum([S[R1,C] : R1 in [R-1,R], R1>0, R1=<8]),
	if ((R,C) != (1,1), (R,C) != (9,9)) then
		Xcnt :: [0,2]
	else
		Xcnt :: [1]
	end	
   end,
   % Magic (erzwingt einen einzigen Faden):
   W[9,2] #= 1, W[9,5] #= 1, W[9,6] #= 1, W[9,7] #= 1, W[9,8] #= 1, W[5,1] #= 1, 
   solve(MVars),
   foreach(R in 1..8) 
      foreach(C in 1..8) 
           if W[R,C]=1 then print(' -') else print('  ') end
	  end, nl,
      foreach(C in 1..8) 
           if S[R,C]=1 then print('|') else print(' ') end,
		   if Cnt[R,C]>0 then print(Cnt[R,C]) else print(' ') end
	  end, 
	  if S[R,9]=1 then print('|') end, nl
   end,
   foreach(C in 1..8) 
        if W[9,C]=1 then print(' -') else print('  ') end
   end, nl.
/*
 - - -   - - -  
 2 2  | |2   3| 
 - - -     - -  
|       | |     
       -   - - -
|2 1 1|3   1    |
 - -   -        
   2|2 3|  1   2|
 -   - -   -   -
| |       | | | 
   - - - -      
|1   1 1   2|2|2
         - -   -
|1     1|    1  |
         - - - -
|    1          
 - - - - - - - -
 */   
