/* Zeit Logelei JUBI Ausgabe S. 69 */
import util.
import cp.

go =>
   N = 11, Max = 9,   % 11 Zeilen x 11 Spalten, Ziffern von 0..9)
   SigZ = [ [13,5,27], [8,19,9], [7,11,24], [24,7,5], [17,17,4], [19,1,3,15], [4,15,2,18], [9,18,2], [1,2,7,22], [9,36], [35,1,5] ], % Zeilensignatur
   SigS = [ [3,34,6], [12,17,16], [6,3,11,10], [15,23], [21,8,7], [20,16], [14,5,14], [16,5,9,8], [4,8,28], [9,14,14], [33,1,11] ],     % Spaltensignatur
   Board = new_array(N+1, N+1),
   Boardvars = array_matrix_to_list(Board),
   Boardvars :: 0..Max,  
   foreach(Row in rows(Board))
		all_different_except_0(Row)
   end,
   foreach(Col in columns(Board))
		all_different_except_0(Col)
   end,
   foreach(Z in 1..N)
   		signature(N, Max, L, SigZ[Z]),   % die Zeilensignatur stimmt!
   		L #= [Board[Z,S] : S in 1..N+1]
   end,
   foreach(S in 1..N)
   		signature(N, Max, L, SigS[S]),  % die Spaltensignatur stimmt!
   		L #= [Board[Z,S] : Z in 1..N+1]
   end,
   solve([ff,down], Boardvars),
   print_board(Board).
   /* 	  */

signature(N, Max, L, Sig) =>     % berechnet L aus Sig!
	L = new_list(N+1), L :: 0..Max, L[N+1] #= 0,
	Len = len(Sig),
    Idx = new_list(Len+1), Idx :: 0..N+1,  % Indices der End-0er (N+1 hei√üt "Rand")
	Idx[1] #= 0,
	foreach(J in 1..Len)
    	I0 #= Idx[J], I1 #= Idx[J+1], I0 #< I1,
    	element(I1,L,0),        % I1 zeigt auf die 0
    	sum([L[I]*(I0 #< I)*(I #< I1) : I in 1..N]) #= Sig[J]  % ist die jeweilige Summe in der Signatur
    end,
    Imax #= Idx[Len+1],
    foreach(I in 1..N)
    	(I #< Imax) #\/ (L[I] #= 0)
    end.
    
print_board(Board) =>
   N = 7,
   foreach(I in 1..N)
      foreach(J in 1..N)
         printf(" %1d", Board[I,J])
      end,
      nl
   end,
   nl.

